#!/usr/bin/env tclsh
# %renumber<^\s*test >%

source [file join [file dir [info script]] initests.tcl]
package require Mk4tcl

test basic-0 {} {
  catch { package require ? }
  lindex [package versions Mk4tcl] end
} $version

test basic-1 {} {
  package require Mk4tcl
} $version

test basic-2 {no databases} {
  set v [mk::file open]
    # ignore one entry if run from a VFS-based TclKit
  if {[lindex $v 0] == "exe"} {
    set v [lrange $v 2 end]
  }
} {}

test basic-3 {temp database} -body {
  # 2003-10-01: this was wrong when run from tclkit, which has "exe" open
  #C [mk::file open] {db {}}
  match "*db {}*" [mk::file open]]
} -setup {mk::file open db} -cleanup {mk::file close db}

test basic-4 {temp data} -body {
  mk::view layout db.a {s i:I}
  set n [mk::row append db.a s one i 1]
  equal $n db.a!0
  equal [mk::get $n] {s one i 1}
  set n [mk::row append db.a s two i 2]
  equal $n db.a!1
  equal [mk::get $n] {s two i 2}
  equal [mk::view size db.a] 2
  mk::view size db.a 1
  equal [mk::get db.a!0] {s one i 1}
  catch {mk::get db.a!1} e
  equal $e {view index is out of range}
} -setup {mk::file open db} -cleanup {mk::file close db}

test basic-5 {use same tag twice} -body {
  catch {mk::file open db} e
  equal $e {file already open}
} -setup {mk::file open db} -cleanup {mk::file close db}

set f f6.tmp
test basic-6 {open file} -body {
  file delete $f
  set f $f
  mk::file open db $f
  # 2003-10-01: this was wrong when run from tclkit, which has "exe" open
  #C [mk::file open] [list db $f]
  match "*[list db $f]*" [mk::file open]
  assert [file exists $f]
  mk::file commit db
    # the file size remains zero, because commit detects no change
  equal [file size $f] 0
  mk::view layout db.a s
  mk::file commit db
  equal [file size $f] 37
} -cleanup {mk::file close db}
file delete $f

# A memory-mapped file can't be deleted while mapped on windows.
test basic-7 {open same file again} -constraints {unix} -setup {
  set f f7.tmp
  mk::file open db1 $f
} -body {
  file delete $f
  equal [mk::file open db2 $f] db2
  mk::file close db2
  return
} -cleanup {
  mk::file close db1
  file delete -force $f
  unset f
} -returnCodes {ok error}

test basic-8 {simple select} -body {
  mk::view layout db.a s
  foreach x {one One two Two three Three four Four} {
    mk::row append db.a s $x
  }
  equal [mk::select db.a] {0 1 2 3 4 5 6 7}
  equal [mk::select db.a s three] {4 5}
  equal [mk::select db.a -exact s three] 4
  equal [mk::select db.a -min s three] {2 3 4 5}
  equal [mk::select db.a -max s three] {0 1 4 5 6 7}
  equal [mk::select db.a -glob s t*] {2 4}
  equal [mk::select db.a -glob s {[tT]*}] {2 3 4 5}
  equal [mk::select db.a -regexp s o] {0 2 3 6 7}
  equal [mk::select db.a -regexp s {[tT]+}] {2 3 4 5}
  equal [mk::select db.a -keyword s t] {2 3 4 5}
  equal [mk::select db.a -keyword s tw] {2 3}
  equal [mk::select db.a -keyword s o] {0 1}
} -setup {mk::file open db} -cleanup {mk::file close db}

test basic-9 {simple sort} -body {
  mk::view layout db.a s
  foreach x {one One two Two three Three four Four} {
    mk::row append db.a s $x
  }
  equal [mk::select db.a -sort s] {6 7 0 1 4 5 2 3}
  equal [mk::select db.a -rsort s] {2 3 4 5 0 1 6 7}
} -setup {mk::file open db} -cleanup {mk::file close db}

test basic-10 {get size} -body {
  mk::view layout db.v {a:I b:I}
  mk::row append db.v
  equal [mk::get db.v!0] {a 0 b 0}
  equal [mk::get db.v!0 -size] {a 0 b 0}
  equal [mk::get db.v!0 -size a] 0
  equal [mk::get db.v!0 -size a b] {0 0}
  foreach {v c} {1 -1 3 -2 15 -4 127 1 -128 1 32767 2 -32768 2 32768 4} {
    mk::set db.v!0 a $v
    equal [mk::get db.v!0 -size a] $c
  }
  equal [mk::get db.v!0 -size b a] {0 4}
} -setup {mk::file open db} -cleanup {mk::file close db}

test basic-11 {case-insensitive select} -body {
  mk::view layout db.a s
  foreach x {one One two Two three Three four Four} {
    mk::row append db.a s $x
  }
  equal [mk::select db.a -glob s t*] {2 4}
  equal [mk::select db.a -globnc s t*] {2 3 4 5}
  equal [mk::select db.a -regexp s t] {2 4}
  equal [mk::select db.a -regexp s (?i)t] {2 3 4 5}
} -setup {mk::file open db} -cleanup {mk::file close db}

test basic-12 {channel interface} -body {
  mk::view layout db.a {m:B}
  mk::view size db.a 1

  set a 1234567890
  set b $a$a$a$a$a$a$a$a$a$a
  set c $b$b$b$b$b$b$b$b$b$b
  set d $c$c$c$c$c$c$c$c$c$c
  equal [string length $d] 10000

  set fd [mk::channel db.a!0 m w]
  puts $fd $a
  puts $fd $b
  puts $fd $c
  puts $fd $d
  close $fd

  switch $::tcl_platform(platform) {
    windows { set eolsize 2 }
    default { set eolsize 1 }
  }
  
  equal [string length [mk::get db.a!0 m]] [expr {11110 + 4 * $eolsize}]

  set fd [mk::channel db.a!0 m]
  equal [gets $fd] $a
  equal [gets $fd] $b
  equal [gets $fd] $c
  equal [gets $fd] $d
  equal [gets $fd x] -1
  close $fd
} -setup {mk::file open db} -cleanup {mk::file close db}

test basic-13 {recursive subviews} -body {
  mk::view layout db.v {tag {nest ^}}
  
  mk::row append db.v tag a
  mk::row append db.v!0.nest tag b
  mk::row append db.v!0.nest!0.nest tag c
  
  equal [mk::get db.v!0 tag] a
  equal [mk::get db.v!0.nest!0 tag] b
  equal [mk::get db.v!0.nest!0.nest!0 tag] c
} -setup {mk::file open db} -cleanup {mk::file close db}


proc mkstream {args} {
    if {[llength $args] != 4} {return -code error "invalid # args"}
    set fd [eval [linsert [lrange $args 0 end-1] 0 mk::channel]]
    fconfigure $fd -translation binary
    puts -nonewline $fd [lindex $args end]
    close $fd
}

proc onRead {chan size cmd} {
    set data [read $chan $size]
    if {[set eof [eof $chan]]} {
        fileevent $chan readable {}
        set ::waiting eof
    }
    uplevel #0 [linsert $cmd end $eof $data]
}

test basic-14 "channel fileevent interface" -setup {
    mk::file open db
    set data [string repeat a 655]
    set ::size 0; set ::waiting {}
    proc basic14 {eof data} {incr ::size [string length $data]}
} -body {
    mk::view layout db.a {m:B}
    mk::view size db.a 1
    mkstream db.a!0 m w $data
    
    set fd [mk::channel db.a!0 m]
    fconfigure $fd -translation binary
    fileevent $fd readable [list onRead $fd 1024 ::basic14]
    set aid [after 1000 {set ::waiting timeout}]
    vwait ::waiting
    after cancel $aid
    close $fd
    list $::waiting $::size
} -cleanup {
    mk::file close db
    unset ::size ::waiting
    rename basic14 {}
} -result {eof 655} -returnCodes {ok error}

test basic-15 "channel fileevent interface (multiple)" -setup {
    mk::file open db
    set data [string repeat a 81920]
    set ::size 0; set ::waiting {}
    proc basic15 {eof data} {incr ::size [string length $data]}
} -body {
    mk::view layout db.a {m:B}
    mk::view size db.a 1
    mkstream db.a!0 m w $data
    set fd [mk::channel db.a!0 m]
    fconfigure $fd -translation binary
    fileevent $fd readable [list onRead $fd 1024 ::basic15]
    set aid [after 1000 {set ::waiting timeout}]
    vwait ::waiting
    after cancel $aid
    close $fd
    list $::waiting $::size
} -cleanup {
    mk::file close db
    unset ::size ::waiting
    rename basic15 {}
} -result {eof 81920}

test basic-16 "fcopy async" -setup {
    mk::file open db
    set data [string repeat a 81920]
    set outfile [makeFile {} basic16.dat]
    set ::waiting {}
    proc basic16 {count {err ok}} {set ::waiting $err}
} -body {
    mk::view layout db.a {m:B}
    mk::view size db.a 1
    mkstream db.a!0 m w $data
    set fd [mk::channel db.a!0 m]
    fconfigure $fd -translation binary
    set fout [open $outfile w]
    fconfigure $fout -translation binary
    set aid [after 1000 {set ::waiting timeout}]
    fcopy $fd $fout -command basic16
    vwait ::waiting
    after cancel $aid
    close $fd
    close $fout
    list $::waiting [file size $outfile]
} -cleanup {
    mk::file close db
    unset ::waiting
    rename basic16 {}
} -result {ok 81920}

test basic-17 "fcopy async multiple" -setup {
    mk::file open db
    set data [string repeat a 81920]
    set outfile [makeFile {} basic17.dat]
    set ::waiting {}
    proc basic17 {fin fout count {err ok}} {
        if {$err ne "ok" || [eof $fin]} {
            set ::waiting $err
        } else {
            fcopy $fin $fout -size 1024 -command [list basic17 $fin $fout]
        }
    }
} -body {
    mk::view layout db.a {m:B}
    mk::view size db.a 1
    mkstream db.a!0 m w $data
    set fd [mk::channel db.a!0 m]
    fconfigure $fd -translation binary
    set fout [open $outfile w]
    fconfigure $fout -translation binary
    set aid [after 1000 {set ::waiting timeout}]
    fcopy $fd $fout -size 1024 -command [list basic17 $fd $fout]
    vwait ::waiting
    after cancel $aid
    close $fd
    close $fout
    list $::waiting [file size $outfile]
} -cleanup {
    mk::file close db
    unset ::waiting
    rename basic17 {}
} -result {ok 81920}

test basic-18 "fcopy async multiple files" -setup {
    mk::file open db
    set outfilea [makeFile {} basic18a.dat]
    set outfileb [makeFile {} basic18b.dat]
    set ::waiting {} ; set ::waitcount 2
    proc basic18 {fin fout count {err ok}} {
        if {$err ne "ok"} {
            set ::waiting "$fin/$fout: $err"
        } elseif {[eof $fin]} {
            close $fin; close $fout
            incr ::waitcount -1
            if {$::waitcount == 0} { set ::waiting ok }
        } else {
            fcopy $fin $fout -size 1024 -command [list basic18 $fin $fout]
        }
    }
} -body {
    mk::view layout db.a {m:B}
    mk::view size db.a 2
    mkstream db.a!0 m w [string repeat a 81920]
    mkstream db.a!1 m w [string repeat b 163840]
    set fda [mk::channel db.a!0 m]; fconfigure $fda -translation binary
    set fdb [mk::channel db.a!1 m]; fconfigure $fdb -translation binary
    set fouta [open $outfilea w]; fconfigure $fouta -translation binary
    set foutb [open $outfileb w]; fconfigure $foutb -translation binary
    set aid [after 1000 {set ::waiting timeout}]
    fcopy $fda $fouta -size 1024 -command [list basic18 $fda $fouta]
    fcopy $fdb $foutb -size 1024 -command [list basic18 $fdb $foutb]
    vwait ::waiting
    after cancel $aid
    catch {close $fda; close $fdb}
    catch {close $fouta; close $foutb}
    list $::waiting [file size $outfilea] [file size $outfileb]
} -cleanup {
    mk::file close db
    unset ::waiting
    rename basic18 {}
} -result {ok 81920 163840} -returnCodes {ok error}

test basic-19 "interp exit with open channel" -setup {
    set interp [interp create]
    interp eval $interp {
        package require Mk4tcl
        mk::file open db
        mk::view layout db.a {stream:B}
        mk::view size db.a 1
        set f [mk::channel db.a!0 stream w]
        puts -nonewline $f [string repeat c 8192]
        close $f
    }
} -body {
    set r [interp eval $interp {
        set fd [mk::channel db.a!0 stream]
        set r [read $fd]
        set r
    }]
    string length $r
} -cleanup {
    interp eval $interp {mk::file close db}
    interp delete $interp
    unset interp
} -result {8192} -returnCodes {error ok}

::tcltest::cleanupTests
