/*
 * tkIntXlibDecls.h --
 *
 *	This file contains the declarations for all platform dependent
 *	unsupported functions that are exported by the Tk library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 * All rights reserved.
 */

#ifndef _TKINTXLIBDECLS
#define _TKINTXLIBDECLS

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tkInt.decls script.
 */

#include "X11/Xutil.h"

#ifdef BUILD_tk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

typedef int (*XAfterFunction) (	    /* WARNING, this type not in Xlib spec */
    Display*		/* display */
);

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#if defined(__WIN32__) || defined(__CYGWIN__) /* WIN */
/* 0 */
EXTERN int		XSetDashes _ANSI_ARGS_((Display *display, GC gc,
				int dash_offset, _Xconst char *dash_list,
				int n));
/* 1 */
EXTERN XModifierKeymap * XGetModifierMapping _ANSI_ARGS_((Display *d));
/* 2 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display *d, Visual *v,
				unsigned int ui1, int i1, int i2, char *cp,
				unsigned int ui2, unsigned int ui3, int i3,
				int i4));
/* 3 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display *d, Drawable dr,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, unsigned long ul, int i3));
/* 4 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display *d, Atom a));
/* 5 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 6 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display *d, Window w,
				Visual *v, int i));
/* 7 */
EXTERN Cursor		XCreatePixmapCursor _ANSI_ARGS_((Display *d,
				Pixmap p1, Pixmap p2, XColor *x1, XColor *x2,
				unsigned int ui1, unsigned int ui2));
/* 8 */
EXTERN Cursor		XCreateGlyphCursor _ANSI_ARGS_((Display *d, Font f1,
				Font f2, unsigned int ui1, unsigned int ui2,
				XColor _Xconst *x1, XColor _Xconst *x2));
/* 9 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 10 */
EXTERN XHostAddress *	XListHosts _ANSI_ARGS_((Display *d, int *i, Bool *b));
/* 11 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display *d,
				unsigned int k, int i));
/* 12 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char *c));
/* 13 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display *d, int i));
/* 14 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 15 */
EXTERN Status		XIconifyWindow _ANSI_ARGS_((Display *d, Window w,
				int i));
/* 16 */
EXTERN Status		XWithdrawWindow _ANSI_ARGS_((Display *d, Window w,
				int i));
/* 17 */
EXTERN Status		XGetWMColormapWindows _ANSI_ARGS_((Display *d,
				Window w, Window **wpp, int *ip));
/* 18 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display *d, Colormap c,
				XColor *xp));
/* 19 */
EXTERN int		XBell _ANSI_ARGS_((Display *d, int i));
/* 20 */
EXTERN int		XChangeProperty _ANSI_ARGS_((Display *d, Window w,
				Atom a1, Atom a2, int i1, int i2,
				_Xconst unsigned char *c, int i3));
/* 21 */
EXTERN int		XChangeWindowAttributes _ANSI_ARGS_((Display *d,
				Window w, unsigned long ul,
				XSetWindowAttributes *x));
/* 22 */
EXTERN int		XClearWindow _ANSI_ARGS_((Display *d, Window w));
/* 23 */
EXTERN int		XConfigureWindow _ANSI_ARGS_((Display *d, Window w,
				unsigned int i, XWindowChanges *x));
/* 24 */
EXTERN int		XCopyArea _ANSI_ARGS_((Display *d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4));
/* 25 */
EXTERN int		XCopyPlane _ANSI_ARGS_((Display *d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4, unsigned long ul));
/* 26 */
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display *display,
				Drawable d, _Xconst char *data,
				unsigned int width, unsigned int height));
/* 27 */
EXTERN int		XDefineCursor _ANSI_ARGS_((Display *d, Window w,
				Cursor c));
/* 28 */
EXTERN int		XDeleteProperty _ANSI_ARGS_((Display *d, Window w,
				Atom a));
/* 29 */
EXTERN int		XDestroyWindow _ANSI_ARGS_((Display *d, Window w));
/* 30 */
EXTERN int		XDrawArc _ANSI_ARGS_((Display *d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 31 */
EXTERN int		XDrawLines _ANSI_ARGS_((Display *d, Drawable dr,
				GC g, XPoint *x, int i1, int i2));
/* 32 */
EXTERN int		XDrawRectangle _ANSI_ARGS_((Display *d, Drawable dr,
				GC g, int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 33 */
EXTERN int		XFillArc _ANSI_ARGS_((Display *d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 34 */
EXTERN int		XFillPolygon _ANSI_ARGS_((Display *d, Drawable dr,
				GC g, XPoint *x, int i1, int i2, int i3));
/* 35 */
EXTERN int		XFillRectangles _ANSI_ARGS_((Display *d, Drawable dr,
				GC g, XRectangle *x, int i));
/* 36 */
EXTERN int		XForceScreenSaver _ANSI_ARGS_((Display *d, int i));
/* 37 */
EXTERN int		XFreeColormap _ANSI_ARGS_((Display *d, Colormap c));
/* 38 */
EXTERN int		XFreeColors _ANSI_ARGS_((Display *d, Colormap c,
				unsigned long *ulp, int i, unsigned long ul));
/* 39 */
EXTERN int		XFreeCursor _ANSI_ARGS_((Display *d, Cursor c));
/* 40 */
EXTERN int		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap *x));
/* 41 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display *d, Drawable dr,
				Window *w, int *i1, int *i2,
				unsigned int *ui1, unsigned int *ui2,
				unsigned int *ui3, unsigned int *ui4));
/* 42 */
EXTERN int		XGetInputFocus _ANSI_ARGS_((Display *d, Window *w,
				int *i));
/* 43 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display *d, Window w,
				Atom a1, long l1, long l2, Bool b, Atom a2,
				Atom *ap, int *ip, unsigned long *ulp1,
				unsigned long *ulp2, unsigned char **cpp));
/* 44 */
EXTERN Status		XGetWindowAttributes _ANSI_ARGS_((Display *d,
				Window w, XWindowAttributes *x));
/* 45 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display *d, Window w,
				Bool b, int i1, int i2, Time t));
/* 46 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display *d, Window w1,
				Bool b, unsigned int ui, int i1, int i2,
				Window w2, Cursor c, Time t));
/* 47 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display *d, KeySym k));
/* 48 */
EXTERN Status		XLookupColor _ANSI_ARGS_((Display *d, Colormap c1,
				_Xconst char *c2, XColor *x1, XColor *x2));
/* 49 */
EXTERN int		XMapWindow _ANSI_ARGS_((Display *d, Window w));
/* 50 */
EXTERN int		XMoveResizeWindow _ANSI_ARGS_((Display *d, Window w,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 51 */
EXTERN int		XMoveWindow _ANSI_ARGS_((Display *d, Window w,
				int i1, int i2));
/* 52 */
EXTERN int		XNextEvent _ANSI_ARGS_((Display *d, XEvent *x));
/* 53 */
EXTERN int		XPutBackEvent _ANSI_ARGS_((Display *d, XEvent *x));
/* 54 */
EXTERN int		XQueryColors _ANSI_ARGS_((Display *d, Colormap c,
				XColor *x, int i));
/* 55 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display *d, Window w1,
				Window *w2, Window *w3, int *i1, int *i2,
				int *i3, int *i4, unsigned int *ui));
/* 56 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display *d, Window w1,
				Window *w2, Window *w3, Window **w4,
				unsigned int *ui));
/* 57 */
EXTERN int		XRaiseWindow _ANSI_ARGS_((Display *d, Window w));
/* 58 */
EXTERN int		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent *x));
/* 59 */
EXTERN int		XResizeWindow _ANSI_ARGS_((Display *d, Window w,
				unsigned int ui1, unsigned int ui2));
/* 60 */
EXTERN int		XSelectInput _ANSI_ARGS_((Display *d, Window w,
				long l));
/* 61 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display *d, Window w, Bool b,
				long l, XEvent *x));
/* 62 */
EXTERN int		XSetCommand _ANSI_ARGS_((Display *d, Window w,
				char **c, int i));
/* 63 */
EXTERN int		XSetIconName _ANSI_ARGS_((Display *d, Window w,
				_Xconst char *c));
/* 64 */
EXTERN int		XSetInputFocus _ANSI_ARGS_((Display *d, Window w,
				int i, Time t));
/* 65 */
EXTERN int		XSetSelectionOwner _ANSI_ARGS_((Display *d, Atom a,
				Window w, Time t));
/* 66 */
EXTERN int		XSetWindowBackground _ANSI_ARGS_((Display *d,
				Window w, unsigned long ul));
/* 67 */
EXTERN int		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display *d,
				Window w, Pixmap p));
/* 68 */
EXTERN int		XSetWindowBorder _ANSI_ARGS_((Display *d, Window w,
				unsigned long ul));
/* 69 */
EXTERN int		XSetWindowBorderPixmap _ANSI_ARGS_((Display *d,
				Window w, Pixmap p));
/* 70 */
EXTERN int		XSetWindowBorderWidth _ANSI_ARGS_((Display *d,
				Window w, unsigned int ui));
/* 71 */
EXTERN int		XSetWindowColormap _ANSI_ARGS_((Display *d, Window w,
				Colormap c));
/* 72 */
EXTERN Bool		XTranslateCoordinates _ANSI_ARGS_((Display *d,
				Window w1, Window w2, int i1, int i2,
				int *i3, int *i4, Window *w3));
/* 73 */
EXTERN int		XUngrabKeyboard _ANSI_ARGS_((Display *d, Time t));
/* 74 */
EXTERN int		XUngrabPointer _ANSI_ARGS_((Display *d, Time t));
/* 75 */
EXTERN int		XUnmapWindow _ANSI_ARGS_((Display *d, Window w));
/* 76 */
EXTERN int		XWindowEvent _ANSI_ARGS_((Display *d, Window w,
				long l, XEvent *x));
/* 77 */
EXTERN void		XDestroyIC _ANSI_ARGS_((XIC x));
/* 78 */
EXTERN Bool		XFilterEvent _ANSI_ARGS_((XEvent *x, Window w));
/* 79 */
EXTERN int		XmbLookupString _ANSI_ARGS_((XIC xi,
				XKeyPressedEvent *xk, char *c, int i,
				KeySym *k, Status *s));
/* 80 */
EXTERN int		TkPutImage _ANSI_ARGS_((unsigned long *colors,
				int ncolors, Display *display, Drawable d,
				GC gc, XImage *image, int src_x, int src_y,
				int dest_x, int dest_y, unsigned int width,
				unsigned int height));
/* Slot 81 is reserved */
/* 82 */
EXTERN Status		XParseColor _ANSI_ARGS_((Display *display,
				Colormap map, _Xconst char *spec,
				XColor *colorPtr));
/* 83 */
EXTERN GC		XCreateGC _ANSI_ARGS_((Display *display, Drawable d,
				unsigned long valuemask, XGCValues *values));
/* 84 */
EXTERN int		XFreeGC _ANSI_ARGS_((Display *display, GC gc));
/* 85 */
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display *display,
				_Xconst char *atom_name, Bool only_if_exists));
/* 86 */
EXTERN int		XSetBackground _ANSI_ARGS_((Display *display, GC gc,
				unsigned long foreground));
/* 87 */
EXTERN int		XSetForeground _ANSI_ARGS_((Display *display, GC gc,
				unsigned long foreground));
/* 88 */
EXTERN int		XSetClipMask _ANSI_ARGS_((Display *display, GC gc,
				Pixmap pixmap));
/* 89 */
EXTERN int		XSetClipOrigin _ANSI_ARGS_((Display *display, GC gc,
				int clip_x_origin, int clip_y_origin));
/* 90 */
EXTERN int		XSetTSOrigin _ANSI_ARGS_((Display *display, GC gc,
				int ts_x_origin, int ts_y_origin));
/* 91 */
EXTERN int		XChangeGC _ANSI_ARGS_((Display *d, GC gc,
				unsigned long mask, XGCValues *values));
/* 92 */
EXTERN int		XSetFont _ANSI_ARGS_((Display *display, GC gc,
				Font font));
/* 93 */
EXTERN int		XSetArcMode _ANSI_ARGS_((Display *display, GC gc,
				int arc_mode));
/* 94 */
EXTERN int		XSetStipple _ANSI_ARGS_((Display *display, GC gc,
				Pixmap stipple));
/* 95 */
EXTERN int		XSetFillRule _ANSI_ARGS_((Display *display, GC gc,
				int fill_rule));
/* 96 */
EXTERN int		XSetFillStyle _ANSI_ARGS_((Display *display, GC gc,
				int fill_style));
/* 97 */
EXTERN int		XSetFunction _ANSI_ARGS_((Display *display, GC gc,
				int function));
/* 98 */
EXTERN int		XSetLineAttributes _ANSI_ARGS_((Display *display,
				GC gc, unsigned int line_width,
				int line_style, int cap_style,
				int join_style));
/* 99 */
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage *image));
/* 100 */
EXTERN XIC		XCreateIC _ANSI_ARGS_(TCL_VARARGS(XIM,xim));
/* 101 */
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display *display,
				long vinfo_mask, XVisualInfo *vinfo_template,
				int *nitems_return));
/* 102 */
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display *display,
				Window w, XTextProperty *text_prop));
/* 103 */
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char **list,
				int count, XTextProperty *text_prop_return));
/* 104 */
EXTERN int		XDrawLine _ANSI_ARGS_((Display *d, Drawable dr, GC g,
				int x1, int y1, int x2, int y2));
/* 105 */
EXTERN int		XWarpPointer _ANSI_ARGS_((Display *d, Window s,
				Window dw, int sx, int sy, unsigned int sw,
				unsigned int sh, int dx, int dy));
/* 106 */
EXTERN int		XFillRectangle _ANSI_ARGS_((Display *display,
				Drawable d, GC gc, int x, int y,
				unsigned int width, unsigned int height));
/* 107 */
EXTERN int		XFlush _ANSI_ARGS_((Display *display));
/* 108 */
EXTERN int		XGrabServer _ANSI_ARGS_((Display *display));
/* 109 */
EXTERN int		XUngrabServer _ANSI_ARGS_((Display *display));
/* 110 */
EXTERN int		XFree _ANSI_ARGS_((VOID *data));
/* 111 */
EXTERN int		XNoOp _ANSI_ARGS_((Display *display));
/* 112 */
EXTERN XAfterFunction	XSynchronize _ANSI_ARGS_((Display *display,
				Bool onoff));
/* 113 */
EXTERN int		XSync _ANSI_ARGS_((Display *display, Bool discard));
/* 114 */
EXTERN VisualID		XVisualIDFromVisual _ANSI_ARGS_((Visual *visual));
#endif /* WIN */
#ifdef MAC_OSX_TK /* AQUA */
/* 0 */
EXTERN int		XSetDashes _ANSI_ARGS_((Display *display, GC gc,
				int dash_offset, _Xconst char *dash_list,
				int n));
/* 1 */
EXTERN XModifierKeymap * XGetModifierMapping _ANSI_ARGS_((Display *d));
/* 2 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display *d, Visual *v,
				unsigned int ui1, int i1, int i2, char *cp,
				unsigned int ui2, unsigned int ui3, int i3,
				int i4));
/* 3 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display *d, Drawable dr,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, unsigned long ul, int i3));
/* 4 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display *d, Atom a));
/* 5 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 6 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display *d, Window w,
				Visual *v, int i));
/* 7 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 8 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display *d, KeyCode k,
				int i));
/* 9 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char *c));
/* 10 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display *d, int i));
/* 11 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 12 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display *d, Colormap c,
				XColor *xp));
/* 13 */
EXTERN int		XBell _ANSI_ARGS_((Display *d, int i));
/* 14 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display *d, Window w,
				Atom a1, Atom a2, int i1, int i2,
				_Xconst unsigned char *c, int i3));
/* 15 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display *d,
				Window w, unsigned long ul,
				XSetWindowAttributes *x));
/* 16 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display *d, Window w,
				unsigned int i, XWindowChanges *x));
/* 17 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display *d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4));
/* 18 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display *d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4, unsigned long ul));
/* 19 */
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display *display,
				Drawable d, _Xconst char *data,
				unsigned int width, unsigned int height));
/* 20 */
EXTERN int		XDefineCursor _ANSI_ARGS_((Display *d, Window w,
				Cursor c));
/* 21 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display *d, Window w));
/* 22 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display *d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 23 */
EXTERN int		XDrawLines _ANSI_ARGS_((Display *d, Drawable dr,
				GC g, XPoint *x, int i1, int i2));
/* 24 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display *d, Drawable dr,
				GC g, int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 25 */
EXTERN void		XFillArc _ANSI_ARGS_((Display *d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 26 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display *d, Drawable dr,
				GC g, XPoint *x, int i1, int i2, int i3));
/* 27 */
EXTERN int		XFillRectangles _ANSI_ARGS_((Display *d, Drawable dr,
				GC g, XRectangle *x, int i));
/* 28 */
EXTERN int		XFreeColormap _ANSI_ARGS_((Display *d, Colormap c));
/* 29 */
EXTERN int		XFreeColors _ANSI_ARGS_((Display *d, Colormap c,
				unsigned long *ulp, int i, unsigned long ul));
/* 30 */
EXTERN int		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap *x));
/* 31 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display *d, Drawable dr,
				Window *w, int *i1, int *i2,
				unsigned int *ui1, unsigned int *ui2,
				unsigned int *ui3, unsigned int *ui4));
/* 32 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display *d, Window w,
				Atom a1, long l1, long l2, Bool b, Atom a2,
				Atom *ap, int *ip, unsigned long *ulp1,
				unsigned long *ulp2, unsigned char **cpp));
/* 33 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display *d, Window w,
				Bool b, int i1, int i2, Time t));
/* 34 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display *d, Window w1,
				Bool b, unsigned int ui, int i1, int i2,
				Window w2, Cursor c, Time t));
/* 35 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display *d, KeySym k));
/* 36 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display *d, Window w));
/* 37 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display *d, Window w,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 38 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display *d, Window w,
				int i1, int i2));
/* 39 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display *d, Window w1,
				Window *w2, Window *w3, int *i1, int *i2,
				int *i3, int *i4, unsigned int *ui));
/* 40 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display *d, Window w));
/* 41 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent *x));
/* 42 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display *d, Window w,
				unsigned int ui1, unsigned int ui2));
/* 43 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display *d, Window w,
				long l));
/* 44 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display *d, Window w, Bool b,
				long l, XEvent *x));
/* 45 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display *d, Window w,
				_Xconst char *c));
/* 46 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display *d, Window w,
				int i, Time t));
/* 47 */
EXTERN int		XSetSelectionOwner _ANSI_ARGS_((Display *d, Atom a,
				Window w, Time t));
/* 48 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display *d,
				Window w, unsigned long ul));
/* 49 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display *d,
				Window w, Pixmap p));
/* 50 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display *d, Window w,
				unsigned long ul));
/* 51 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display *d,
				Window w, Pixmap p));
/* 52 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display *d,
				Window w, unsigned int ui));
/* 53 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display *d, Window w,
				Colormap c));
/* 54 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display *d, Time t));
/* 55 */
EXTERN int		XUngrabPointer _ANSI_ARGS_((Display *d, Time t));
/* 56 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display *d, Window w));
/* 57 */
EXTERN int		TkPutImage _ANSI_ARGS_((unsigned long *colors,
				int ncolors, Display *display, Drawable d,
				GC gc, XImage *image, int src_x, int src_y,
				int dest_x, int dest_y, unsigned int width,
				unsigned int height));
/* 58 */
EXTERN Status		XParseColor _ANSI_ARGS_((Display *display,
				Colormap map, _Xconst char *spec,
				XColor *colorPtr));
/* 59 */
EXTERN GC		XCreateGC _ANSI_ARGS_((Display *display, Drawable d,
				unsigned long valuemask, XGCValues *values));
/* 60 */
EXTERN int		XFreeGC _ANSI_ARGS_((Display *display, GC gc));
/* 61 */
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display *display,
				_Xconst char *atom_name, Bool only_if_exists));
/* 62 */
EXTERN int		XSetBackground _ANSI_ARGS_((Display *display, GC gc,
				unsigned long foreground));
/* 63 */
EXTERN int		XSetForeground _ANSI_ARGS_((Display *display, GC gc,
				unsigned long foreground));
/* 64 */
EXTERN int		XSetClipMask _ANSI_ARGS_((Display *display, GC gc,
				Pixmap pixmap));
/* 65 */
EXTERN int		XSetClipOrigin _ANSI_ARGS_((Display *display, GC gc,
				int clip_x_origin, int clip_y_origin));
/* 66 */
EXTERN int		XSetTSOrigin _ANSI_ARGS_((Display *display, GC gc,
				int ts_x_origin, int ts_y_origin));
/* 67 */
EXTERN int		XChangeGC _ANSI_ARGS_((Display *d, GC gc,
				unsigned long mask, XGCValues *values));
/* 68 */
EXTERN int		XSetFont _ANSI_ARGS_((Display *display, GC gc,
				Font font));
/* 69 */
EXTERN int		XSetArcMode _ANSI_ARGS_((Display *display, GC gc,
				int arc_mode));
/* 70 */
EXTERN int		XSetStipple _ANSI_ARGS_((Display *display, GC gc,
				Pixmap stipple));
/* 71 */
EXTERN int		XSetFillRule _ANSI_ARGS_((Display *display, GC gc,
				int fill_rule));
/* 72 */
EXTERN int		XSetFillStyle _ANSI_ARGS_((Display *display, GC gc,
				int fill_style));
/* 73 */
EXTERN int		XSetFunction _ANSI_ARGS_((Display *display, GC gc,
				int function));
/* 74 */
EXTERN int		XSetLineAttributes _ANSI_ARGS_((Display *display,
				GC gc, unsigned int line_width,
				int line_style, int cap_style,
				int join_style));
/* 75 */
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage *image));
/* 76 */
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
/* 77 */
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display *display,
				long vinfo_mask, XVisualInfo *vinfo_template,
				int *nitems_return));
/* 78 */
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display *display,
				Window w, XTextProperty *text_prop));
/* 79 */
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char **list,
				int count, XTextProperty *text_prop_return));
/* 80 */
EXTERN void		XDrawSegments _ANSI_ARGS_((Display *display,
				Drawable d, GC gc, XSegment *segments,
				int nsegments));
/* 81 */
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display *display,
				int mode));
/* 82 */
EXTERN int		XDrawLine _ANSI_ARGS_((Display *d, Drawable dr, GC g,
				int x1, int y1, int x2, int y2));
/* 83 */
EXTERN int		XFillRectangle _ANSI_ARGS_((Display *display,
				Drawable d, GC gc, int x, int y,
				unsigned int width, unsigned int height));
/* 84 */
EXTERN void		XClearWindow _ANSI_ARGS_((Display *d, Window w));
/* 85 */
EXTERN void		XDrawPoint _ANSI_ARGS_((Display *display, Drawable d,
				GC gc, int x, int y));
/* 86 */
EXTERN void		XDrawPoints _ANSI_ARGS_((Display *display,
				Drawable d, GC gc, XPoint *points,
				int npoints, int mode));
/* 87 */
EXTERN int		XWarpPointer _ANSI_ARGS_((Display *display,
				Window src_w, Window dest_w, int src_x,
				int src_y, unsigned int src_width,
				unsigned int src_height, int dest_x,
				int dest_y));
/* 88 */
EXTERN void		XQueryColor _ANSI_ARGS_((Display *display,
				Colormap colormap, XColor *def_in_out));
/* 89 */
EXTERN void		XQueryColors _ANSI_ARGS_((Display *display,
				Colormap colormap, XColor *defs_in_out,
				int ncolors));
/* 90 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display *d, Window w1,
				Window *w2, Window *w3, Window **w4,
				unsigned int *ui));
/* 91 */
EXTERN int		XSync _ANSI_ARGS_((Display *display, Bool flag));
#endif /* AQUA */

typedef struct TkIntXlibStubs {
    int magic;
    struct TkIntXlibStubHooks *hooks;

#if defined(__WIN32__) || defined(__CYGWIN__) /* WIN */
    int (*xSetDashes) _ANSI_ARGS_((Display *display, GC gc, int dash_offset, _Xconst char *dash_list, int n)); /* 0 */
    XModifierKeymap * (*xGetModifierMapping) _ANSI_ARGS_((Display *d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display *d, Visual *v, unsigned int ui1, int i1, int i2, char *cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display *d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display *d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display *d, Window w, Visual *v, int i)); /* 6 */
    Cursor (*xCreatePixmapCursor) _ANSI_ARGS_((Display *d, Pixmap p1, Pixmap p2, XColor *x1, XColor *x2, unsigned int ui1, unsigned int ui2)); /* 7 */
    Cursor (*xCreateGlyphCursor) _ANSI_ARGS_((Display *d, Font f1, Font f2, unsigned int ui1, unsigned int ui2, XColor _Xconst *x1, XColor _Xconst *x2)); /* 8 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 9 */
    XHostAddress * (*xListHosts) _ANSI_ARGS_((Display *d, int *i, Bool *b)); /* 10 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display *d, unsigned int k, int i)); /* 11 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char *c)); /* 12 */
    Window (*xRootWindow) _ANSI_ARGS_((Display *d, int i)); /* 13 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 14 */
    Status (*xIconifyWindow) _ANSI_ARGS_((Display *d, Window w, int i)); /* 15 */
    Status (*xWithdrawWindow) _ANSI_ARGS_((Display *d, Window w, int i)); /* 16 */
    Status (*xGetWMColormapWindows) _ANSI_ARGS_((Display *d, Window w, Window **wpp, int *ip)); /* 17 */
    Status (*xAllocColor) _ANSI_ARGS_((Display *d, Colormap c, XColor *xp)); /* 18 */
    int (*xBell) _ANSI_ARGS_((Display *d, int i)); /* 19 */
    int (*xChangeProperty) _ANSI_ARGS_((Display *d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char *c, int i3)); /* 20 */
    int (*xChangeWindowAttributes) _ANSI_ARGS_((Display *d, Window w, unsigned long ul, XSetWindowAttributes *x)); /* 21 */
    int (*xClearWindow) _ANSI_ARGS_((Display *d, Window w)); /* 22 */
    int (*xConfigureWindow) _ANSI_ARGS_((Display *d, Window w, unsigned int i, XWindowChanges *x)); /* 23 */
    int (*xCopyArea) _ANSI_ARGS_((Display *d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 24 */
    int (*xCopyPlane) _ANSI_ARGS_((Display *d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 25 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display *display, Drawable d, _Xconst char *data, unsigned int width, unsigned int height)); /* 26 */
    int (*xDefineCursor) _ANSI_ARGS_((Display *d, Window w, Cursor c)); /* 27 */
    int (*xDeleteProperty) _ANSI_ARGS_((Display *d, Window w, Atom a)); /* 28 */
    int (*xDestroyWindow) _ANSI_ARGS_((Display *d, Window w)); /* 29 */
    int (*xDrawArc) _ANSI_ARGS_((Display *d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 30 */
    int (*xDrawLines) _ANSI_ARGS_((Display *d, Drawable dr, GC g, XPoint *x, int i1, int i2)); /* 31 */
    int (*xDrawRectangle) _ANSI_ARGS_((Display *d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 32 */
    int (*xFillArc) _ANSI_ARGS_((Display *d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 33 */
    int (*xFillPolygon) _ANSI_ARGS_((Display *d, Drawable dr, GC g, XPoint *x, int i1, int i2, int i3)); /* 34 */
    int (*xFillRectangles) _ANSI_ARGS_((Display *d, Drawable dr, GC g, XRectangle *x, int i)); /* 35 */
    int (*xForceScreenSaver) _ANSI_ARGS_((Display *d, int i)); /* 36 */
    int (*xFreeColormap) _ANSI_ARGS_((Display *d, Colormap c)); /* 37 */
    int (*xFreeColors) _ANSI_ARGS_((Display *d, Colormap c, unsigned long *ulp, int i, unsigned long ul)); /* 38 */
    int (*xFreeCursor) _ANSI_ARGS_((Display *d, Cursor c)); /* 39 */
    int (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap *x)); /* 40 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display *d, Drawable dr, Window *w, int *i1, int *i2, unsigned int *ui1, unsigned int *ui2, unsigned int *ui3, unsigned int *ui4)); /* 41 */
    int (*xGetInputFocus) _ANSI_ARGS_((Display *d, Window *w, int *i)); /* 42 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display *d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom *ap, int *ip, unsigned long *ulp1, unsigned long *ulp2, unsigned char **cpp)); /* 43 */
    Status (*xGetWindowAttributes) _ANSI_ARGS_((Display *d, Window w, XWindowAttributes *x)); /* 44 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display *d, Window w, Bool b, int i1, int i2, Time t)); /* 45 */
    int (*xGrabPointer) _ANSI_ARGS_((Display *d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 46 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display *d, KeySym k)); /* 47 */
    Status (*xLookupColor) _ANSI_ARGS_((Display *d, Colormap c1, _Xconst char *c2, XColor *x1, XColor *x2)); /* 48 */
    int (*xMapWindow) _ANSI_ARGS_((Display *d, Window w)); /* 49 */
    int (*xMoveResizeWindow) _ANSI_ARGS_((Display *d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 50 */
    int (*xMoveWindow) _ANSI_ARGS_((Display *d, Window w, int i1, int i2)); /* 51 */
    int (*xNextEvent) _ANSI_ARGS_((Display *d, XEvent *x)); /* 52 */
    int (*xPutBackEvent) _ANSI_ARGS_((Display *d, XEvent *x)); /* 53 */
    int (*xQueryColors) _ANSI_ARGS_((Display *d, Colormap c, XColor *x, int i)); /* 54 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display *d, Window w1, Window *w2, Window *w3, int *i1, int *i2, int *i3, int *i4, unsigned int *ui)); /* 55 */
    Status (*xQueryTree) _ANSI_ARGS_((Display *d, Window w1, Window *w2, Window *w3, Window **w4, unsigned int *ui)); /* 56 */
    int (*xRaiseWindow) _ANSI_ARGS_((Display *d, Window w)); /* 57 */
    int (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent *x)); /* 58 */
    int (*xResizeWindow) _ANSI_ARGS_((Display *d, Window w, unsigned int ui1, unsigned int ui2)); /* 59 */
    int (*xSelectInput) _ANSI_ARGS_((Display *d, Window w, long l)); /* 60 */
    Status (*xSendEvent) _ANSI_ARGS_((Display *d, Window w, Bool b, long l, XEvent *x)); /* 61 */
    int (*xSetCommand) _ANSI_ARGS_((Display *d, Window w, char **c, int i)); /* 62 */
    int (*xSetIconName) _ANSI_ARGS_((Display *d, Window w, _Xconst char *c)); /* 63 */
    int (*xSetInputFocus) _ANSI_ARGS_((Display *d, Window w, int i, Time t)); /* 64 */
    int (*xSetSelectionOwner) _ANSI_ARGS_((Display *d, Atom a, Window w, Time t)); /* 65 */
    int (*xSetWindowBackground) _ANSI_ARGS_((Display *d, Window w, unsigned long ul)); /* 66 */
    int (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display *d, Window w, Pixmap p)); /* 67 */
    int (*xSetWindowBorder) _ANSI_ARGS_((Display *d, Window w, unsigned long ul)); /* 68 */
    int (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display *d, Window w, Pixmap p)); /* 69 */
    int (*xSetWindowBorderWidth) _ANSI_ARGS_((Display *d, Window w, unsigned int ui)); /* 70 */
    int (*xSetWindowColormap) _ANSI_ARGS_((Display *d, Window w, Colormap c)); /* 71 */
    Bool (*xTranslateCoordinates) _ANSI_ARGS_((Display *d, Window w1, Window w2, int i1, int i2, int *i3, int *i4, Window *w3)); /* 72 */
    int (*xUngrabKeyboard) _ANSI_ARGS_((Display *d, Time t)); /* 73 */
    int (*xUngrabPointer) _ANSI_ARGS_((Display *d, Time t)); /* 74 */
    int (*xUnmapWindow) _ANSI_ARGS_((Display *d, Window w)); /* 75 */
    int (*xWindowEvent) _ANSI_ARGS_((Display *d, Window w, long l, XEvent *x)); /* 76 */
    void (*xDestroyIC) _ANSI_ARGS_((XIC x)); /* 77 */
    Bool (*xFilterEvent) _ANSI_ARGS_((XEvent *x, Window w)); /* 78 */
    int (*xmbLookupString) _ANSI_ARGS_((XIC xi, XKeyPressedEvent *xk, char *c, int i, KeySym *k, Status *s)); /* 79 */
    int (*tkPutImage) _ANSI_ARGS_((unsigned long *colors, int ncolors, Display *display, Drawable d, GC gc, XImage *image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 80 */
    VOID *reserved81;
    Status (*xParseColor) _ANSI_ARGS_((Display *display, Colormap map, _Xconst char *spec, XColor *colorPtr)); /* 82 */
    GC (*xCreateGC) _ANSI_ARGS_((Display *display, Drawable d, unsigned long valuemask, XGCValues *values)); /* 83 */
    int (*xFreeGC) _ANSI_ARGS_((Display *display, GC gc)); /* 84 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display *display, _Xconst char *atom_name, Bool only_if_exists)); /* 85 */
    int (*xSetBackground) _ANSI_ARGS_((Display *display, GC gc, unsigned long foreground)); /* 86 */
    int (*xSetForeground) _ANSI_ARGS_((Display *display, GC gc, unsigned long foreground)); /* 87 */
    int (*xSetClipMask) _ANSI_ARGS_((Display *display, GC gc, Pixmap pixmap)); /* 88 */
    int (*xSetClipOrigin) _ANSI_ARGS_((Display *display, GC gc, int clip_x_origin, int clip_y_origin)); /* 89 */
    int (*xSetTSOrigin) _ANSI_ARGS_((Display *display, GC gc, int ts_x_origin, int ts_y_origin)); /* 90 */
    int (*xChangeGC) _ANSI_ARGS_((Display *d, GC gc, unsigned long mask, XGCValues *values)); /* 91 */
    int (*xSetFont) _ANSI_ARGS_((Display *display, GC gc, Font font)); /* 92 */
    int (*xSetArcMode) _ANSI_ARGS_((Display *display, GC gc, int arc_mode)); /* 93 */
    int (*xSetStipple) _ANSI_ARGS_((Display *display, GC gc, Pixmap stipple)); /* 94 */
    int (*xSetFillRule) _ANSI_ARGS_((Display *display, GC gc, int fill_rule)); /* 95 */
    int (*xSetFillStyle) _ANSI_ARGS_((Display *display, GC gc, int fill_style)); /* 96 */
    int (*xSetFunction) _ANSI_ARGS_((Display *display, GC gc, int function)); /* 97 */
    int (*xSetLineAttributes) _ANSI_ARGS_((Display *display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 98 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage *image)); /* 99 */
    XIC (*xCreateIC) _ANSI_ARGS_((XIM xim, ...)); /* 100 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display *display, long vinfo_mask, XVisualInfo *vinfo_template, int *nitems_return)); /* 101 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display *display, Window w, XTextProperty *text_prop)); /* 102 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char **list, int count, XTextProperty *text_prop_return)); /* 103 */
    int (*xDrawLine) _ANSI_ARGS_((Display *d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 104 */
    int (*xWarpPointer) _ANSI_ARGS_((Display *d, Window s, Window dw, int sx, int sy, unsigned int sw, unsigned int sh, int dx, int dy)); /* 105 */
    int (*xFillRectangle) _ANSI_ARGS_((Display *display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 106 */
    int (*xFlush) _ANSI_ARGS_((Display *display)); /* 107 */
    int (*xGrabServer) _ANSI_ARGS_((Display *display)); /* 108 */
    int (*xUngrabServer) _ANSI_ARGS_((Display *display)); /* 109 */
    int (*xFree) _ANSI_ARGS_((VOID *data)); /* 110 */
    int (*xNoOp) _ANSI_ARGS_((Display *display)); /* 111 */
    XAfterFunction (*xSynchronize) _ANSI_ARGS_((Display *display, Bool onoff)); /* 112 */
    int (*xSync) _ANSI_ARGS_((Display *display, Bool discard)); /* 113 */
    VisualID (*xVisualIDFromVisual) _ANSI_ARGS_((Visual *visual)); /* 114 */
#endif /* WIN */
#ifdef MAC_OSX_TK /* AQUA */
    int (*xSetDashes) _ANSI_ARGS_((Display *display, GC gc, int dash_offset, _Xconst char *dash_list, int n)); /* 0 */
    XModifierKeymap * (*xGetModifierMapping) _ANSI_ARGS_((Display *d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display *d, Visual *v, unsigned int ui1, int i1, int i2, char *cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display *d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display *d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display *d, Window w, Visual *v, int i)); /* 6 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 7 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display *d, KeyCode k, int i)); /* 8 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char *c)); /* 9 */
    Window (*xRootWindow) _ANSI_ARGS_((Display *d, int i)); /* 10 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 11 */
    Status (*xAllocColor) _ANSI_ARGS_((Display *d, Colormap c, XColor *xp)); /* 12 */
    int (*xBell) _ANSI_ARGS_((Display *d, int i)); /* 13 */
    void (*xChangeProperty) _ANSI_ARGS_((Display *d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char *c, int i3)); /* 14 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display *d, Window w, unsigned long ul, XSetWindowAttributes *x)); /* 15 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display *d, Window w, unsigned int i, XWindowChanges *x)); /* 16 */
    void (*xCopyArea) _ANSI_ARGS_((Display *d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 17 */
    void (*xCopyPlane) _ANSI_ARGS_((Display *d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 18 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display *display, Drawable d, _Xconst char *data, unsigned int width, unsigned int height)); /* 19 */
    int (*xDefineCursor) _ANSI_ARGS_((Display *d, Window w, Cursor c)); /* 20 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display *d, Window w)); /* 21 */
    void (*xDrawArc) _ANSI_ARGS_((Display *d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 22 */
    int (*xDrawLines) _ANSI_ARGS_((Display *d, Drawable dr, GC g, XPoint *x, int i1, int i2)); /* 23 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display *d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 24 */
    void (*xFillArc) _ANSI_ARGS_((Display *d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 25 */
    void (*xFillPolygon) _ANSI_ARGS_((Display *d, Drawable dr, GC g, XPoint *x, int i1, int i2, int i3)); /* 26 */
    int (*xFillRectangles) _ANSI_ARGS_((Display *d, Drawable dr, GC g, XRectangle *x, int i)); /* 27 */
    int (*xFreeColormap) _ANSI_ARGS_((Display *d, Colormap c)); /* 28 */
    int (*xFreeColors) _ANSI_ARGS_((Display *d, Colormap c, unsigned long *ulp, int i, unsigned long ul)); /* 29 */
    int (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap *x)); /* 30 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display *d, Drawable dr, Window *w, int *i1, int *i2, unsigned int *ui1, unsigned int *ui2, unsigned int *ui3, unsigned int *ui4)); /* 31 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display *d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom *ap, int *ip, unsigned long *ulp1, unsigned long *ulp2, unsigned char **cpp)); /* 32 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display *d, Window w, Bool b, int i1, int i2, Time t)); /* 33 */
    int (*xGrabPointer) _ANSI_ARGS_((Display *d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 34 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display *d, KeySym k)); /* 35 */
    void (*xMapWindow) _ANSI_ARGS_((Display *d, Window w)); /* 36 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display *d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 37 */
    void (*xMoveWindow) _ANSI_ARGS_((Display *d, Window w, int i1, int i2)); /* 38 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display *d, Window w1, Window *w2, Window *w3, int *i1, int *i2, int *i3, int *i4, unsigned int *ui)); /* 39 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display *d, Window w)); /* 40 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent *x)); /* 41 */
    void (*xResizeWindow) _ANSI_ARGS_((Display *d, Window w, unsigned int ui1, unsigned int ui2)); /* 42 */
    void (*xSelectInput) _ANSI_ARGS_((Display *d, Window w, long l)); /* 43 */
    Status (*xSendEvent) _ANSI_ARGS_((Display *d, Window w, Bool b, long l, XEvent *x)); /* 44 */
    void (*xSetIconName) _ANSI_ARGS_((Display *d, Window w, _Xconst char *c)); /* 45 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display *d, Window w, int i, Time t)); /* 46 */
    int (*xSetSelectionOwner) _ANSI_ARGS_((Display *d, Atom a, Window w, Time t)); /* 47 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display *d, Window w, unsigned long ul)); /* 48 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display *d, Window w, Pixmap p)); /* 49 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display *d, Window w, unsigned long ul)); /* 50 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display *d, Window w, Pixmap p)); /* 51 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display *d, Window w, unsigned int ui)); /* 52 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display *d, Window w, Colormap c)); /* 53 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display *d, Time t)); /* 54 */
    int (*xUngrabPointer) _ANSI_ARGS_((Display *d, Time t)); /* 55 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display *d, Window w)); /* 56 */
    int (*tkPutImage) _ANSI_ARGS_((unsigned long *colors, int ncolors, Display *display, Drawable d, GC gc, XImage *image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 57 */
    Status (*xParseColor) _ANSI_ARGS_((Display *display, Colormap map, _Xconst char *spec, XColor *colorPtr)); /* 58 */
    GC (*xCreateGC) _ANSI_ARGS_((Display *display, Drawable d, unsigned long valuemask, XGCValues *values)); /* 59 */
    int (*xFreeGC) _ANSI_ARGS_((Display *display, GC gc)); /* 60 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display *display, _Xconst char *atom_name, Bool only_if_exists)); /* 61 */
    int (*xSetBackground) _ANSI_ARGS_((Display *display, GC gc, unsigned long foreground)); /* 62 */
    int (*xSetForeground) _ANSI_ARGS_((Display *display, GC gc, unsigned long foreground)); /* 63 */
    int (*xSetClipMask) _ANSI_ARGS_((Display *display, GC gc, Pixmap pixmap)); /* 64 */
    int (*xSetClipOrigin) _ANSI_ARGS_((Display *display, GC gc, int clip_x_origin, int clip_y_origin)); /* 65 */
    int (*xSetTSOrigin) _ANSI_ARGS_((Display *display, GC gc, int ts_x_origin, int ts_y_origin)); /* 66 */
    int (*xChangeGC) _ANSI_ARGS_((Display *d, GC gc, unsigned long mask, XGCValues *values)); /* 67 */
    int (*xSetFont) _ANSI_ARGS_((Display *display, GC gc, Font font)); /* 68 */
    int (*xSetArcMode) _ANSI_ARGS_((Display *display, GC gc, int arc_mode)); /* 69 */
    int (*xSetStipple) _ANSI_ARGS_((Display *display, GC gc, Pixmap stipple)); /* 70 */
    int (*xSetFillRule) _ANSI_ARGS_((Display *display, GC gc, int fill_rule)); /* 71 */
    int (*xSetFillStyle) _ANSI_ARGS_((Display *display, GC gc, int fill_style)); /* 72 */
    int (*xSetFunction) _ANSI_ARGS_((Display *display, GC gc, int function)); /* 73 */
    int (*xSetLineAttributes) _ANSI_ARGS_((Display *display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 74 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage *image)); /* 75 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 76 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display *display, long vinfo_mask, XVisualInfo *vinfo_template, int *nitems_return)); /* 77 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display *display, Window w, XTextProperty *text_prop)); /* 78 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char **list, int count, XTextProperty *text_prop_return)); /* 79 */
    void (*xDrawSegments) _ANSI_ARGS_((Display *display, Drawable d, GC gc, XSegment *segments, int nsegments)); /* 80 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display *display, int mode)); /* 81 */
    int (*xDrawLine) _ANSI_ARGS_((Display *d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 82 */
    int (*xFillRectangle) _ANSI_ARGS_((Display *display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 83 */
    void (*xClearWindow) _ANSI_ARGS_((Display *d, Window w)); /* 84 */
    void (*xDrawPoint) _ANSI_ARGS_((Display *display, Drawable d, GC gc, int x, int y)); /* 85 */
    void (*xDrawPoints) _ANSI_ARGS_((Display *display, Drawable d, GC gc, XPoint *points, int npoints, int mode)); /* 86 */
    int (*xWarpPointer) _ANSI_ARGS_((Display *display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y)); /* 87 */
    void (*xQueryColor) _ANSI_ARGS_((Display *display, Colormap colormap, XColor *def_in_out)); /* 88 */
    void (*xQueryColors) _ANSI_ARGS_((Display *display, Colormap colormap, XColor *defs_in_out, int ncolors)); /* 89 */
    Status (*xQueryTree) _ANSI_ARGS_((Display *d, Window w1, Window *w2, Window *w3, Window **w4, unsigned int *ui)); /* 90 */
    int (*xSync) _ANSI_ARGS_((Display *display, Bool flag)); /* 91 */
#endif /* AQUA */
} TkIntXlibStubs;

#ifdef __cplusplus
extern "C" {
#endif
extern TkIntXlibStubs *tkIntXlibStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#if defined(__WIN32__) || defined(__CYGWIN__) /* WIN */
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XCreatePixmapCursor
#define XCreatePixmapCursor \
	(tkIntXlibStubsPtr->xCreatePixmapCursor) /* 7 */
#endif
#ifndef XCreateGlyphCursor
#define XCreateGlyphCursor \
	(tkIntXlibStubsPtr->xCreateGlyphCursor) /* 8 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 9 */
#endif
#ifndef XListHosts
#define XListHosts \
	(tkIntXlibStubsPtr->xListHosts) /* 10 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 11 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 12 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 13 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 14 */
#endif
#ifndef XIconifyWindow
#define XIconifyWindow \
	(tkIntXlibStubsPtr->xIconifyWindow) /* 15 */
#endif
#ifndef XWithdrawWindow
#define XWithdrawWindow \
	(tkIntXlibStubsPtr->xWithdrawWindow) /* 16 */
#endif
#ifndef XGetWMColormapWindows
#define XGetWMColormapWindows \
	(tkIntXlibStubsPtr->xGetWMColormapWindows) /* 17 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 18 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 19 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 20 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 21 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 22 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 23 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 24 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 25 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 26 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 27 */
#endif
#ifndef XDeleteProperty
#define XDeleteProperty \
	(tkIntXlibStubsPtr->xDeleteProperty) /* 28 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 29 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 30 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 31 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 32 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 33 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 34 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 35 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 36 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 37 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 38 */
#endif
#ifndef XFreeCursor
#define XFreeCursor \
	(tkIntXlibStubsPtr->xFreeCursor) /* 39 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 40 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 41 */
#endif
#ifndef XGetInputFocus
#define XGetInputFocus \
	(tkIntXlibStubsPtr->xGetInputFocus) /* 42 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 43 */
#endif
#ifndef XGetWindowAttributes
#define XGetWindowAttributes \
	(tkIntXlibStubsPtr->xGetWindowAttributes) /* 44 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 45 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 46 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 47 */
#endif
#ifndef XLookupColor
#define XLookupColor \
	(tkIntXlibStubsPtr->xLookupColor) /* 48 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 49 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 50 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 51 */
#endif
#ifndef XNextEvent
#define XNextEvent \
	(tkIntXlibStubsPtr->xNextEvent) /* 52 */
#endif
#ifndef XPutBackEvent
#define XPutBackEvent \
	(tkIntXlibStubsPtr->xPutBackEvent) /* 53 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 54 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 55 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 56 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 57 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 58 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 59 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 60 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 61 */
#endif
#ifndef XSetCommand
#define XSetCommand \
	(tkIntXlibStubsPtr->xSetCommand) /* 62 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 63 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 64 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 65 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 66 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 67 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 68 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 69 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 70 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 71 */
#endif
#ifndef XTranslateCoordinates
#define XTranslateCoordinates \
	(tkIntXlibStubsPtr->xTranslateCoordinates) /* 72 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 73 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 74 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 75 */
#endif
#ifndef XWindowEvent
#define XWindowEvent \
	(tkIntXlibStubsPtr->xWindowEvent) /* 76 */
#endif
#ifndef XDestroyIC
#define XDestroyIC \
	(tkIntXlibStubsPtr->xDestroyIC) /* 77 */
#endif
#ifndef XFilterEvent
#define XFilterEvent \
	(tkIntXlibStubsPtr->xFilterEvent) /* 78 */
#endif
#ifndef XmbLookupString
#define XmbLookupString \
	(tkIntXlibStubsPtr->xmbLookupString) /* 79 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 80 */
#endif
/* Slot 81 is reserved */
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 82 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 83 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 84 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 85 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 86 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 87 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 88 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 89 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 90 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 91 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 92 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 93 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 94 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 95 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 96 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 97 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 98 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 99 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 100 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 101 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 102 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 103 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 104 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 105 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 106 */
#endif
#ifndef XFlush
#define XFlush \
	(tkIntXlibStubsPtr->xFlush) /* 107 */
#endif
#ifndef XGrabServer
#define XGrabServer \
	(tkIntXlibStubsPtr->xGrabServer) /* 108 */
#endif
#ifndef XUngrabServer
#define XUngrabServer \
	(tkIntXlibStubsPtr->xUngrabServer) /* 109 */
#endif
#ifndef XFree
#define XFree \
	(tkIntXlibStubsPtr->xFree) /* 110 */
#endif
#ifndef XNoOp
#define XNoOp \
	(tkIntXlibStubsPtr->xNoOp) /* 111 */
#endif
#ifndef XSynchronize
#define XSynchronize \
	(tkIntXlibStubsPtr->xSynchronize) /* 112 */
#endif
#ifndef XSync
#define XSync \
	(tkIntXlibStubsPtr->xSync) /* 113 */
#endif
#ifndef XVisualIDFromVisual
#define XVisualIDFromVisual \
	(tkIntXlibStubsPtr->xVisualIDFromVisual) /* 114 */
#endif
#endif /* WIN */
#ifdef MAC_OSX_TK /* AQUA */
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 7 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 8 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 9 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 10 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 11 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 12 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 13 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 14 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 15 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 16 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 17 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 18 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 19 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 20 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 21 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 22 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 23 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 24 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 25 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 26 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 27 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 28 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 29 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 30 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 31 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 32 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 33 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 34 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 35 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 36 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 37 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 38 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 39 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 40 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 41 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 42 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 43 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 44 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 45 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 46 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 47 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 48 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 49 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 50 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 51 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 52 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 53 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 54 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 55 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 56 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 57 */
#endif
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 58 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 59 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 60 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 61 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 62 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 63 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 64 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 65 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 66 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 67 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 68 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 69 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 70 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 71 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 72 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 73 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 74 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 75 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 76 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 77 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 78 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 79 */
#endif
#ifndef XDrawSegments
#define XDrawSegments \
	(tkIntXlibStubsPtr->xDrawSegments) /* 80 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 81 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 82 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 83 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 84 */
#endif
#ifndef XDrawPoint
#define XDrawPoint \
	(tkIntXlibStubsPtr->xDrawPoint) /* 85 */
#endif
#ifndef XDrawPoints
#define XDrawPoints \
	(tkIntXlibStubsPtr->xDrawPoints) /* 86 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 87 */
#endif
#ifndef XQueryColor
#define XQueryColor \
	(tkIntXlibStubsPtr->xQueryColor) /* 88 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 89 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 90 */
#endif
#ifndef XSync
#define XSync \
	(tkIntXlibStubsPtr->xSync) /* 91 */
#endif
#endif /* AQUA */

#endif /* defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#if defined(__WIN32__)

#undef XFlush
#undef XGrabServer
#undef XUngrabServer
#undef XFree
#undef XNoOp
#undef XSynchronize
#undef XSync
#undef XVisualIDFromVisual

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)
/*
 * The following stubs implement various calls that don't do anything
 * under Windows. In win32 tclsh 8.4 and 8.5 holds:
 *         tkIntStubsPtr->tkBindDeadWindow != NULL
 * Then the following macros don't do anything. But when running Tcl win32
 * version 8.6 or Cygwin (8.4, 8.5 or 8.6) then the functions are available in
 * the stub table. The real function from the stub table will be called,
 * even though it might be doing nothing.
 */

#define XFlush(display) (tkIntStubsPtr->tkBindDeadWindow? 0: tkIntXlibStubsPtr->xFlush(display))
#define XGrabServer(display) (tkIntStubsPtr->tkBindDeadWindow? 0: tkIntXlibStubsPtr->xGrabServer(display))
#define XUngrabServer(display) (tkIntStubsPtr->tkBindDeadWindow? 0: tkIntXlibStubsPtr->xUngrabServer(display))

/*
 * The following functions are implemented as macros under Windows.
 */


#define XFree(data) (tkIntStubsPtr->tkBindDeadWindow? ((data)? (ckfree((char *) (data)), 0): 0): tkIntXlibStubsPtr->xFree(data))
#define XNoOp(display) (tkIntStubsPtr->tkBindDeadWindow? 0: tkIntXlibStubsPtr->xNoOp(display))
#define XSynchronize(display, bool) (tkIntStubsPtr->tkBindDeadWindow? 0: tkIntXlibStubsPtr->xSynchronize(display, bool))
#define XSync(display, bool) (tkIntStubsPtr->tkBindDeadWindow? 0: tkIntXlibStubsPtr->xSync(display, bool))
#define XVisualIDFromVisual(visual) (tkIntStubsPtr->tkBindDeadWindow? ((visual)->visualid): tkIntXlibStubsPtr->xVisualIDFromVisual(visual))

#else /* !USE_TK_STUBS */
/*
 * The following stubs implement various calls that don't do anything
 * under Windows.
 */

#define XFlush(display)
#define XGrabServer(display)
#define XUngrabServer(display)

/*
 * The following functions are implemented as macros under Windows.
 */

#define XFree(data) {if ((data) != NULL) ckfree((char *) (data));}
#define XNoOp(display) {display->request++;}
#define XSynchronize(display, bool) {display->request++;}
#define XSync(display, bool) {display->request++;}
#define XVisualIDFromVisual(visual) (visual->visualid)

#endif /* !USE_TK_STUBS */

#endif /* __WIN32__ */

#endif /* _TKINTXLIBDECLS */
