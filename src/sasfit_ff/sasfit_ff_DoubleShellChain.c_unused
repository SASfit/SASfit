/*
 * src/sasfit_ff/sasfit_ff_DoubleShellChain.c
 *
 * Copyright (c) 2008-2009, Paul Scherrer Institute (PSI)
 *
 * This file is part of SASfit.
 *
 * SASfit is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SASfit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SASfit.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Author(s) of this file:
 *   Joachim Kohlbrecher (joachim.kohlbrecher@psi.ch)
 *   Ingo Bressler (ingo.bressler@bam.de)
 */

#include <gsl/gsl_math.h>
#include "include/sasfit_ff_utils.h"


scalar sasfit_ff_DoubleShellChain(scalar q, sasfit_param * param)
{
	scalar A, R12, ftmp, Detac, Deta1, Deta2, Kval1, Kval2, Kval3;
	scalar Rc, DR1, DR2, L, eta_c, eta_1, eta_2, eta_sol, x_sol_sh2, n;
	int i,j;
	sasfit_param subParam;

	SASFIT_ASSERT_PTR(param);

	sasfit_get_param(param, 10, &Rc, &DR1, &DR2, &L, &eta_c, &eta_1, &eta_2, &eta_sol, &x_sol_sh2, &n);

	Deta2 = (1.0-x_sol_sh2)*(eta_2-eta_sol);
	Deta1 = (eta_1-eta_sol);
	Detac = (eta_c-eta_sol);

	SASFIT_CHECK_COND1((q < 0.0), param, "q(%lg) < 0",q);
	SASFIT_CHECK_COND1((n <= 0.0), param, "n(%lg) <= 0",n);
	SASFIT_CHECK_COND1((fabs(x_sol_sh2-0.5) > 0.5), param, "|x_sol_sh2 - 0.5|(%lg) > 0.5",fabs(x_sol_sh2-0.5));
	SASFIT_CHECK_COND1(((2*(Rc+DR1+DR2)+L) <= 0.0), param, "(2*(Rc+DR1+DR2)+L)(%lg) <= 0",(2*(Rc+DR1+DR2)+L));
	SASFIT_CHECK_COND1(((fabs(Detac)+fabs(Deta1)+fabs(Deta2)) <= 0.0), param, "(|Detac|+|Deta1|+|Deta2|)(%lg) <= 0",(fabs(Detac)+fabs(Deta1)+fabs(Deta2)));

	sasfit_init_param( &subParam );

	subParam.p[0] = Rc+DR1+DR2;
	subParam.p[3] = Deta2;
	Kval1 = sasfit_ff_sphere_f(q, &subParam);
	SASFIT_CHECK_SUB_ERR(param, subParam);

	subParam.p[0] = Rc+DR1;
	subParam.p[3] = Deta1-Deta2;
	Kval2 = sasfit_ff_sphere_f(q, &subParam);
	SASFIT_CHECK_SUB_ERR(param, subParam);

	subParam.p[0] = Rc;
	subParam.p[3] = Detac-Deta1;
	Kval3 = sasfit_ff_sphere_f(q, &subParam);
	SASFIT_CHECK_SUB_ERR(param, subParam);
/*
	A =   K(interp,q,(Rc+DR1+DR2),Deta2,error)
	+ K(interp,q,(Rc+DR1),Deta1-Deta2,error)
	+ K(interp,q,Rc,Detac-Deta1,error);
*/
	A = Kval1 + Kval2 + Kval3;

	ftmp = 0.0;
	for (i=0; i < n ;i++)
	{
		for (j=0; j < n ;j++)
		{
			R12 = fabs(j-i)*(2.0*(Rc+DR1+DR2)+L);
			if (q*R12 <= 0)
			{
				ftmp = ftmp + A*A;
			} else {
				ftmp = ftmp+A*A*sin(q*R12)/(q*R12);
			}
		}
	}
	return ftmp;
}

