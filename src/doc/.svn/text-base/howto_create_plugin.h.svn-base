/**
 * \page howto_create_plugin Howto Create a Plugin For \sf
 * \brief Howto add new model functions to \sf.
 *
 * \section whatis What Is a Plugin in \sf
 *
 * A plugin is a container for model functions. It may contain an 
 * arbitrary number of \ref form_fac, \ref size_distrib \b and 
 * \ref struct_fac. All types are supported within a single plugin at the 
 * same time. But it is recommended to use a plugin for grouping model
 * functions of the same or similar kind. In this way, all model functions
 * provided by a plugin can make use of the same plugin-internal helper
 * routines which are not accessible in public.
 * 
 * To begin creating new plugins it is recommended to also build \sf from
 * source. It is not required but with this approach the build environment 
 * is verified to work correctly and also the plugin system compatibility is
 * assured. See the following pages for advice on that:
 *
 * \ref howto_build \n
 *
 * \section enter_plugin_guide Enter the \sf Plugin Guide
 *
 * Start the \sf program and select the item \e Tools -\> <em>create new plugin</em> 
 * in the menu bar:
 *
 * \image html related_pages/howto_create_plugin_0.png
 * \image latex related_pages/howto_create_plugin_0.eps "open the Plugin Guide" width=7cm
 *
 * \section plugin_guide_gui \sf Plugin Creation GUI
 *
 * \image html related_pages/howto_create_plugin_4.png
 * \image latex related_pages/howto_create_plugin_4.eps "\sf Plugin Guide" width=10cm
 *
 * <ul>
 * <li>\b A: general plugin configuration
 *   <ul>
 *   <li>\b 1. Name of the plugin. This is only relevant for the directory to be
 *   created and the name of the library file. Entered characters will be 
 *   converted to conformant style automatically, i.e. upper case letters 
 *   to lower case, spaces and unwanted characters to underscores.
 *   <li>\b 2. Overall number of model functions this plugin will provide.
 *   <li>\b 3. Select a model function to configure (with area \b B).
 *   </ul>
 * <li>\b B: model function configuration
 *   <ul>
 *   <li>\b 1. Name of the new model function to display in the fitting window
 *   <em>analytical form factor</em> of \sf.
 *   <li>\b 2. Internal name of the new model function derived and converted from \b 1.
 *   <li>\b 3. Error type of the current model function. This sets values and
 *   appropriate message texts on error.
 *   <li>\b 4. Select the appropriate group this model function belongs to. The display
 *   name of this group is shown at the bottom of the selection box and can be found 
 *   in the drop-down-list when selecting a model function for 
 *   fitting in the \sf window <em>analytical form factor</em>.\n
 *   To add a new group edit one of the files \sf_grp_def.
 *   <li>\b 5. Number of input parameters for this model function.
 *   <li>\b 6. Name of each parameter. Must not contain spaces and is required
 *   to be in lower case (will be converted as typed).
 *   <li>\b 7. Description for each parameter. May contain spaces and upper case
 *   characters.
 *   </ul>
 * <li>\b C: import of external plugin model functions for reuse
 *   <ul>
 *   <li>\b 1. Model functions to import from currently loaded plugins. To add a
 *   model function select it in the right window and press the button \<-. To
 *   remove a model function select it in the left window and press the button
 *   -\>.
 *   <li>\b 2. All available model functions provided by currently loaded plugins.
 *   </ul>
 * </ul>
 *
 * When done with setting up the plugin press the button <em>Create Directory</em>.
 *
 * \section plugin_build Build the Plugin
 *
 * The directory <tt>\sf_src/src/plugins/test_plugin</tt> was created. It
 * already contains some skeleton code which is a valid plugin. By rebuilding
 * \sf at this state it will automatically detect and build the new plugin.
 * Upon startup of the application it is also supposed to load automatically
 * with the new model functions appearing in the respective categories. If
 * loading fails there will be an error message in the <em>\sf Console</em>
 * window.
 *
 * The missing piece is now your custom calculation of the physical
 * properties, i.e. model.
 *
 * \section plugin_custom_code Add Custom Code
 *
 * Regarding the above example there was one file created for each model
 * function configured (\ref plugin_dir), e.g.
 * <tt>%sasfit_ff_first_test_function.c</tt>. For a quick start just add some
 * custom code to this file below the comment 
 * <em>// insert your code here</em>. For the \ref form_fac of a sphere this
 * will be:
 *
 * \code 
 * // insert your code here
 * return PARAM_ONE*4.0*M_PI*(sin(q*PARAM_TWO) - q*PARAM_TWO*cos(q*PARAM_TWO))/pow(q,3.0);
 * // return 0.0;
 * \endcode
 *
 * The default return statement <tt>return 0.0;</tt> was commented out and
 * replaced by the intensity calculus of a sphere. Also, It can
 * be removed completely as it makes no sense.
 *
 * In the above example the following symbols are used:
 * - \b q: A single value of the scattering vector. The model function will be
 *   called for each value of the scattering vector. For example, if it
 *   contains 200 sampling points this model function will be called at least
 *   200 times with a different \b q value.
 * - <b>cos,sin,pow</b>: Mathematical functions of the standard library, also
 *   functions provided by the GSL library can be used.
 * - \b M_PI: A definition of the mathematical constant \e pi provided by the
 *   GSL library. It will be replaced by the actual number of \e pi at build time
 *   by the compiler (more precisely the preprocessor).
 * - <b>PARAM_ONE,PARAM_TWO</b>: Input parameters of the model function as
 *   specified in the Plugin Guide. These are also definitions or aliases
 *   which will be replaced at build time by the actual operation to access the 
 *   parameter data structure. It is defined at the top of each file (as it
 *   may vary across different model functions):
 *   \code
 *   #define PARAM_ONE       param->p[0]
 *   #define PARAM_TWO       param->p[1]
 *   \endcode
 *
 * Furthermore, there is a \ref SASFIT_ASSERT_PTR statement which is mandatory 
 * for each function as it verifies the validity of the parameter data structure.
 *
 * In addition, the primary model function contains some statements to check
 * the input parameter for a valid data range. They can be modified, added or
 * removed to your needs. See \ref SASFIT_CHECK_COND1 and also \ref
 * sasfit_error_common.h for alternatives.
 *
 * New variables may be introduced, of course. They have to be declared at the
 * top of the function body or at the beginning of a scope (which is opened
 * and closed by curly parentheses <em>{}</em>). Per convention (\ref
 * coding_conv), variable
 * names have to be in lower case. This allows to distinguish them from
 * definitions/aliases which are supposed to be written in upper case per
 * convention. An example with the above function:
 *
 * \code
 * scalar sasfit_ff_first_test_function(scalar q, sasfit_param * param)
 * {
 *     scalar some_value = 3.04; // double precision floating point
 *     scalar result;
 *
 *     SASFIT_ASSERT_PTR(param); // assert pointer param is valid
 *     SASFIT_CHECK_COND1((PARAM_ONE < 0.0), param, "param_one(%lg) < 0",PARAM_ONE);
 *
 *     if(PARAM_ONE < some_value)
 *     {
 *         scalar another_val = 6.0;
 *         result = some_value*another_val;
 *     } else {
 *         result = PARAM_ONE*some_value;
 *     }
 *     return result;
 * }
 * \endcode
 *
 * \section plugin_dir Plugin Directory Structure
 *
 * The directory structure created by the Plugin Guide is the following:
 *
 * <ul>
 * <li><tt>test_plugin</tt>
 * 	<ul>
 * 	<li><tt>%CMakeLists.txt</tt>
 * 	<li><tt>%interface.c</tt>
 * 	<li><tt>%sasfit_ff_first_test_function.c</tt>
 * 	<li><tt>%sasfit_ff_second_function.c</tt>
 * 	<li><tt>%sasfit_sq_troisieme_fonction.c</tt>
 * 	<li><tt>%include</tt>
 * 		<ul>
 * 		<li><tt>%private.h</tt>
 * 		<li><tt>%sasfit_test_plugin.h</tt>
 * 		</ul>
 * 	</ul>
 * </ul>
 *
 * <b><tt>%CMakeLists.txt</tt></b> sets the external build dependencies of the
 * plugin. Usually, there are no changes required. It may help to adjust it if
 * additional external libraries (others than GSL or F2C) are required to link
 * against (statically).
 *
 * <b><tt>%interface.c</tt></b> contains the import and export declarations of
 * model functions. It sets which model functions to import from other 
 * plugins and which model functions this plugin provides by itself.
 * In addition, it is possible to add there some custom code which is executed 
 * at load time of the plugin, i.e. once upon startup of the \sf program. This
 * is usually not needed.
 *
 * <b><tt>%sasfit_[ff|sq|sd]_\<function name\>.c</tt></b> contains the
 * definition of all C-functions provided by a single model function. This
 * includes the model function by itself. For \ref form_fac it optionally 
 * also includes the non-squared intensity function (trailing \e _f) and a function 
 * for the volume fraction (trailing \e _v). For \ref struct_fac and 
 * \ref size_distrib they will not be used, i.e. called.
 *
 * In <b><tt>%private.h</tt></b> may be put some definitions of local parameters
 * if they are useful in \b all model functions of this plugin (below comment 
 * <em>// add local defines here:</em>). But primarily, it contains some 
 * definitions and includes which enable the plugin to be build dynamically 
 * as plugin but also as static function code for use in external programs. see:\n
 * \ref howto_build \n
 * \ref howto_use_plugin
 *
 * <b><tt>%sasfit_\<plugin name\>.h</tt></b> contains the public C-interface
 * (API) of this plugin and its functions. This file is parsed at startup by \sf to
 * determine the name, parameter count and names of each model function to load. 
 * Loading of the plugin is aborted if the information of the binary plugin
 * library and this header file mismatch. In general, this file is referenced by
 * external programs to determine which functions are provided by this
 * (plugin-) library. \n
 * In addition, this file contains the full documentation of each model
 * function of this plugin in \e doxygen format (see http://www.doxygen.org ).
 *
 *
 * \section links Some Links Regarding C Programming
 *
 * - In german language:
 *   - http://openbook.galileocomputing.de/c_von_a_bis_z/
 *
 * - In english language:
 *   - http://www2.its.strath.ac.uk/courses/c/
 *   - http://en.wikibooks.org/wiki/C_Programming
 *   - http://de.wikibooks.org/wiki/C-Programmierung
 *   - http://claymore.engineer.gvsu.edu/~steriana/226/C.CheatSheet.pdf
 *   - http://www.digilife.be/quickreferences/quickrefs.htm
 *
 * \section editors Some Editors with Syntax Highlighting
 *
 * - Notepad++ http://notepad-plus.sourceforge.net
 * - SciTE http://www.scintilla.org/SciTE.html
 *
 * \see 
 * \ref howto_build \n
 * \ref coding_conv
 */
