/**
 * \page howto_build Howto build the \sf source code
 *
 * \section build_env Install the Build Environment
 *
 * \subsection Windows
 *
 * Download the combined build environment for \sf from:
 *
 * http://wollsau.de/sasfit/sasfit_build_environment_20101015.7z
 *
 * It contains \lnk{MinGW&MSYS, mingw.org} with recent versions of
 * \lnk{GCC,gcc.gnu.org}, 
 * \lnk{GSL,www.gnu.org/software/gsl}, 
 * \lnk{CMake,www.cmake.org},
 * \lnk{Tcl&Tk,www.tcl.tk} and 
 * \lnk{BLT,blt.sourceforge.net} included.
 *
 * - Extract it to your Harddrive. Ideally to \path{c:\\} which results in new
 *   directories
 *   - \path{c:\\mingw}
 *   - \path{c:\\msys}
 * - Add the path of \path{mingw\\bin} to your PATH Variable.
 *   - control center -\> system -\> advanced (tab) -\> environment 
 *     variables -\> select PATH (for user or system doesn't matter) -\> 
 *     edit -\> append \path{c:\\mingw\\bin} and 
 *     separate it with ; (a semicolon) from the other path names
 *   - test it: start -\> run -\> type \qt{cmd} -\> 
 *     in the new command window type \qt{gcc} <enter>,
 *     - it's supposed to complain about <em>no input files</em>
 *     - if it says <em>command not found</em> it doesn't work yet
 * - Execute \path{msys.bat} in \path{c:\\msys}, 
 *   it will open up the MSYS shell (command window). 
 *   - Create a shortcut to it on the desktop.
 *
 * \subsection Linux
 *
 * Install the <em>build-essential</em> packages provided by your 
 * distribution. This includes \e gcc and \e make at least. Further software
 * required:
 *
 * - Cmake >= 2.8.0
 *   - Ubuntu package name: \e cmake
 * - GSL library >= 1.10 
 *   - Ubuntu package names: \e libgsl0ldbl, \e libgsl0-dev
 * - Tcl 8.4 
 *   - Ubuntu package names: \e tcl8.4, \e tcl8.4-dev, \e tk8.4 and \e tk8.4-dev
 *
 * The easiest way is to install precompiled packages 
 * provided by your distribution. Refer to your package manager for this
 * (e.g. apt/deb on Ubuntu, yum/rpm on Redhat or yast/rpm on SUSE).
 *
 * If CMake is not successful at determining the location of the library
 * prerequisites it aborts and reports an error about this.
 *
 * \subsection gsl_lin64 Linux 64bit
 *
 * It is recommended to \b not use the packages provided by 
 * the distribution but to build/compile it on your own. \sf needs to be
 * linked against the static GSL libraries (for use as single TCL extension inside 
 * a starkit). \n
 * For static libraries to be linked into a shared library it seems they have 
 * to be build with the <tt>-fPIC</tt> compiler flag on 64bit (but this hurts 
 * performance on 32bit).
 * At least on Ubuntu Hardy the author had problems to successfully link the 
 * precompiled static GSL libraries into a shared \sf library.
 * As a result, on 64bit Linux, configure GSL with PIC-only enabled:
 * <tt><gsl-source-dir> $ ./configure --with-pic && make && sudo make install</tt>
 * 
 * \section cfg Configure and Build
 *
 * <em>[Convention: \path{\sf_src} denotes the location of the \sf 
 * source directory on your harddisk after decompression (unzip or untar) of
 * the downloaded package.]</em>
 *
 * The build procedure is controlled by <a href="http://www.cmake.org">CMake</a>. 
 * It generates the required project files for your platform.
 * Tested settings are:
 *
 * - Makefiles on Linux
 * 
 * - Makefiles for MSYS on Windows
 *
 * CMake supports many other project file formats as well. Run Cmake without any
 * arguments to get a list of available generators.
 *
 * \subsection instructions Recommended Procedure
 *
 * - Open a command line window (i.e. \e MSYS command window, \e terminal on 
 *   Linux) and enter the following commands:
 *
 * \code
 * $ cd \<your-sasfit_source-directory\>
 * $ mkdir build
 * $ cd build
 * $ cmake ../src -G <cmake-generator>
 * $ make 
 * \endcode
 *
 * \e <cmake-generator> depends on your platform:
 * - \b Windows: \qt{MSYS Makefiles} (including quotation marks)
 * - \b Linux: \qt{Unix Makefiles} (including quotation marks)
 *   - no need to specify \e -G because this is the default
 *
 * - After CMake ran and everything was ok, you will get the following lines 
 *   at the end of output:
 *
 * \code
 *    -- Configuring done
 *    -- Generating done
 *    -- Build files have been written to: <some path>
 * \endcode
 *
 * - After \e make: \build_results{so,a,/}
 * 
 * \note To run the start script \path{sasfit.vfs\\main.tcl} from the source
 *   package of \sf directly, open it with \path{c:\\mingw\\bin\\wish84.exe}
 *   - Create an association in the <em>open with ...</em> dialog, to let 
 *     Windows select it automatically next time.
 *
 * \section cmake_opt Optional CMake Build Options
 *
 * \subsection optim OPTIM
 *
 * \code
 * > cmake ../src -DOPTIM=TRUE
 * \endcode
 *
 * This builds \sf optimized for the current hardware platform. The resulting
 * binary may be incompatible to other platforms/processors. This option
 * conflicts with option \ref dbg.
 *
 * \subsection bin CREATE_BINARY
 *
 * \code
 * > cmake ../src -DCREATE_BINARY=TRUE
 * \endcode
 *
 * Creates a compressed archive containing the binary
 * distribution of \sf for the current platform. It is enabled per default. 
 * Its location is <tt>\sf_src</tt>
 *
 * \subsection src CREATE_SOURCE
 *
 * \code
 * > cmake ../src -DCREATE_SOURCE=TRUE
 * \endcode
 *
 * Creates a compressed archive containing the source
 * distribution of \sf. It is disabled per default. 
 * Its location is <tt>\sf_src</tt>
 *
 * \subsection gsl GSL_PATH
 *
 * \code
 * > cmake ../src -DGSL_PATH="/tmp/gsl 1.14"
 * \endcode
 *
 * Used to specify the location of the GSL library directly. The given path
 * has to point to the source tree which contains the built binary files of
 * GSL. To prepare the GSL, you just need to
 * - extract it to some path, e.g. \path{/tmp/gsl 1.14}
 * - therein, run \e configure followed by \e make
 *
 * \subsection stdc5 USE_STDC5
 *
 * \code
 * > cmake ../src -DUSE_STDC5=TRUE
 * \endcode
 *
 * On Linux, selects a saskit (modified tclkit, starpack executable) binary 
 * which was linked against \e libstdc++5 for the construction of a starpack
 * executable. This is useful for old Linux distributions (e.g. Scientific
 * Linux 3.x).
 *
 * \subsection stat WITH_STATIC
 *
 * \code
 * > cmake ../src -DWITH_STATIC=TRUE
 * \endcode
 *
 * Enables the build of a static \ref sasfit_common library as well as
 * static plugin libraries.
 *
 * \subsection dbg DEBUG
 *
 * \code
 * > cmake ../src -DDEBUG=TRUE
 * \endcode
 *
 * This builds \sf in debug mode and activates the usage of the debug version 
 * of saskit (modified tclkit, starpack executable).
 *
 * [ This is incomplete, because it requires linked-in libraries to be build in 
 * debug mode, as well the \e -g switch present on the gcc commandline. It is 
 * also recommended to use this on windows with msys/mingw only, because the 
 * \b saskit binary was build using msys&mingw on windows. It may be 
 * incompatible to the binaries generated by \vs ]
 *
 * 
 * \see 
 * \ref howto_use_old \n
 * \ref howto_use_plugin
 *
 */
