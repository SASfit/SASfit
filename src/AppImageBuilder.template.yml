# src/AppImageBuilder.template.yml
# An appimage-builder recipe for SASfit, see https://appimage-builder.readthedocs.io for details
#
# Install AppImage-Builder and requirements:
#   https://appimage-builder.readthedocs.io/en/latest/intro/install.html#debian-ubuntu
#
# To be called like this from SASfit root source dir:
#   appimage-builder --recipe src/AppImageBuilder.yml
# For cleanup during consecutive runs:
#   (cd saskit && ./saskit_linux64 gen/buildkit cleanupall && rm saskit_linux64 && rm -Rf ../appdir ../appimage* ../*.AppImage)
version: 1
AppDir:
  # assuming this file resides in sasfit/src/,
  # addresses the package dir created by CMake previously
  path: "@SASFIT_APPIMAGE_APPDIR@"
  app_info:
    id: org.sasfit.SASfit
    name: SASfit
    icon: sasfit
    version: "@SASFIT_VERSION@"
    exec: saskit
    exec_args: $APPDIR/sasfit.vfs/main.tcl $@
  before_bundle: |
    echo "  [1] before_bundle, running appimage-build in '$(pwd)', appdir: '$APPDIR'"
  after_bundle: |
    [ -z "$APPDIR" ] && export APPDIR="@SASFIT_APPIMAGE_APPDIR@"
    echo "  [2] after_bundle '$APPDIR'"
    #
    # adjustments to the current layout CMake prepares
    (cd "$APPDIR" && rm -Rf sasfit sasfit.sh) # files not needed anymore, FIXME
    #
    # FIXME: generate proper icons from the svg
    SF_ICON_PATH=usr/share/icons/hicolor/512x512/apps/sasfit.png
    mkdir -p "$APPDIR/$(dirname $SF_ICON_PATH)"
    cp doc/images/sasfit_icon_w512.png "$APPDIR/$SF_ICON_PATH"
    #
    # Copy the saskit dqkit to let it get the proper libc interpreter update
    SASKIT_BUILD_PATH="$(find saskit/build/ -mindepth 1 -maxdepth 1 -type d | grep -- $(uname -n)-)"
    echo "  Using SASKIT_BUILD_PATH: '$SASKIT_BUILD_PATH'"
    cp "$SASKIT_BUILD_PATH"/dqkit/dqkit.bin "$APPDIR"/saskit
    ## meta data
    SF_SUMMARY="Analyzing and plotting small angle scattering data"
    SF_ID=org.sasfit.SASfit
    # Create the .desktop file, use 'desktop-file-validate' from 'desktop-file-utils' for validation
    mkdir -p "$APPDIR"/usr/share/applications
    DESKTOP_PATH="$APPDIR/usr/share/applications/${SF_ID}.desktop"
    cat << EOF > "$DESKTOP_PATH"
    [Desktop Entry]
    Name=SASfit
    Comment=$SF_SUMMARY
    Type=Application
    Categories=Science;
    Exec=saskit
    Icon=sasfit
    Terminal=false
    EOF
    desktop-file-validate "$DESKTOP_PATH"
    # Create freedesktop upstream metainfo file
    mkdir -p "$APPDIR"/usr/share/metainfo
    METAINFO_PATH="$APPDIR/usr/share/metainfo/${SF_ID}.appdata.xml"
    cat << EOF > "$METAINFO_PATH"
    <?xml version="1.0" encoding="UTF-8"?>
    <component type="desktop-application">
      <id>${SF_ID}</id>
      <name>SASfit</name>
      <summary>$SF_SUMMARY</summary>
      <icon type="stock">sasfit</icon>
      <metadata_license>CC-BY-4.0</metadata_license>
      <project_license>AGPL-3.0-or-later</project_license>
      <description>
        <p>A curve fitting program for small-angle scattering curves, mostly from SAXS and SANS experiments in analytical or biological chemistry. For a basic overview and reference, please see: I. Breßler, J. Kohlbrecher, A. F. Thünemann, &quot;SASfit: a tool for small-angle scattering data analysis ...&quot;. J. Appl. Cryst. 48: 1587-1598, DOI: 10.1107/S1600576715016544</p>
      </description>
      <url type="homepage">https://sasfit.org</url>
      <url type="bugtracker">https://github.com/SASfit/SASfit/issues</url>
      <url type="help">https://raw.githubusercontent.com/SASfit/SASfit/master/doc/manual/sasfit.pdf</url>
      <developer_name>The SASfit team</developer_name>
      <update_contact>sasfit_AT_ingobressler.net</update_contact>
      <launchable type="desktop-id">${SF_ID}.desktop</launchable>
      <screenshots>
        <screenshot type="default">
          <image>https://raw.githubusercontent.com/SASfit/SASfit/master/doc/images/sasfit_screenshot_w640.png</image>
          <caption>SASfit multi-fit plot window with multiple data sets and models fitted to them respectively.</caption>
        </screenshot>
      </screenshots>
      <categories><category>Science</category></categories>
    </component>
    EOF
    appstreamcli validate "$METAINFO_PATH"
  before_runtime: |
    [ -z "$APPDIR" ] && export APPDIR="@SASFIT_APPIMAGE_APPDIR@"
    echo "  [3] before_runtime '$APPDIR'"
    #rm -Rf "$APPDIR"/runtime
    # for debugging, show interpreter with 'patchelf --print-interpreter ...'
  after_runtime: |
    [ -z "$APPDIR" ] && export APPDIR="@SASFIT_APPIMAGE_APPDIR@"
    echo "  [4] after_runtime '$APPDIR'"
    #
    # copy modified dqkit back to the saskit source for reassembling
    SASKIT_BUILD_PATH="$(find saskit/build/ -mindepth 1 -maxdepth 1 -type d | grep "$(uname -n)-")"
    echo "  Using SASKIT_BUILD_PATH: '$SASKIT_BUILD_PATH'"
    SF_DEBUG="$(echo $SASKIT_BUILD_PATH | grep -o debug || true)"
    # echo "SF_DEBUG: '$SF_DEBUG', SASKIT_BUILD_PATH: '$SASKIT_BUILD_PATH'"
    [ -z "$SF_DEBUG" ] || SF_DEBUG="-$SF_DEBUG"
    cp "$APPDIR"/saskit "$SASKIT_BUILD_PATH"/dqkit/dqkit.bin
    export TCLSH="$(readlink -f src/tcl/linux64/bin/tclsh8.4)"
    #
    # reassemble the combined tcl interpreter with the redirected ld
    (cd saskit && \
     rm -f lib64 && \
     ln -s "$APPDIR"/runtime/default/lib64 . && \
     $TCLSH gen/buildkit finalize $SF_DEBUG -tcl=*.* -tk=*.* -blt -compression=none -binary=all -resfile=current)
    #
    # copy the reassembled tcl interpreter back into the app dir
    cp saskit/bin/*/dqkit-all.bin "$APPDIR"/saskit
  apt:
    arch:
    - amd64
    allow_unauthenticated: false
    sources:
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal main restricted
      key_url: http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x871920D1991BC93C
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal universe
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal multiverse
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
    - sourceline: deb http://security.ubuntu.com/ubuntu focal-security main restricted
    - sourceline: deb http://security.ubuntu.com/ubuntu focal-security universe
    - sourceline: deb http://security.ubuntu.com/ubuntu focal-security multiverse
    include:
    - libgcc-s1
    - libstdc++6
    - libc6
  files:
    include:
    - sasfit.vfs/**
    - @SASFIT_BIN_FILE_LIST_FORMATTED@
    exclude:
    - sasfit.vfs/lib/app-sasfit/tcl/*.zip
    - opt/libc/usr/share/doc
    - usr/lib/x86_64-linux-gnu/gconv
    - usr/share/man
    - usr/share/doc/*/README.*
    - usr/share/doc/*/changelog.*
    - usr/share/doc/*/NEWS.*
    - usr/share/doc/*/TODO.*
    - usr/include
  test:
    # - Tests require docker to be installed and its socket (e.g. /run/docker.sock)
    #   being accessible for the current user (being in the 'docker' group)
    #   for Ubuntu: 'apt install docker.io && adduser $(whoami) docker'
    # - if network fails inside the docker container, try restarting docker svc on host
    # - Running SASfit on a headless server/container requires a virtual screen, xvfb is used here
    #   The program is started as usual and killed after 10 seconds which is considered a success.
    #   On failure, it would not start and return other errors and return codes.
    # - testing an old Ubuntu LTS and Redhat compatible CentOS only
    ubuntu:
      image: appimagecrafters/tests-env:ubuntu-bionic
      before_command: sh -c 'apt-get update && apt-get install -y xvfb'
      command: sh -c 'date; timeout 10 xvfb-run ./AppRun; [ "$?" -eq 124 ]'
      use_host_x: False
#    debian:
#      image: appimagecrafters/tests-env:debian-stable
#      before_command: sh -c '. /etc/os-release; sed -i "s/stable/$VERSION_CODENAME/g" /etc/apt/sources.list; apt-get update && apt-get install -y xvfb'
#      command: sh -c 'date; timeout 10 xvfb-run ./AppRun; [ "$?" -eq 124 ]'
#      use_host_x: False
    centos:
      image: appimagecrafters/tests-env:centos-7
      before_command: sh -c 'yum install -y xorg-x11-server-Xvfb which'
      command: sh -c 'date; timeout 10 xvfb-run ./AppRun; [ "$?" -eq 124 ]'
      use_host_x: False
#    fedora:
#      image: appimagecrafters/tests-env:fedora-30
#      before_command: sh -c 'yum install -y xorg-x11-server-Xvfb'
#      command: sh -c 'date; timeout 10 xvfb-run ./AppRun; [ "$?" -eq 124 ]'
#      use_host_x: False
#    arch:
#      image: appimagecrafters/tests-env:archlinux-latest
#      before_command: sh -c 'rm -Rf /etc/pacman.d/gnupg; pacman-key --init; pacman-key --populate; pacman -Syy --noconfirm archlinux-keyring; pacman --noconfirm -Syyu; pacman --noconfirm -S xorg-server-xvfb'
#      command: sh -c 'date; timeout 10 xvfb-run ./AppRun; [ "$?" -eq 124 ]'
#      use_host_x: False
AppImage:
  arch: x86_64
  # Set update info as soon as releases are uploaded to GitHub
  # https://github.com/AppImage/AppImageSpec/blob/master/draft.md#update-information
  #update-information: guess
