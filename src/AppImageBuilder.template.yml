# appimage-builder recipe see https://appimage-builder.readthedocs.io for details
# To be called like this from SASfit root source dir:
#   appimage-builder --recipe src/AppImageBuilder.yml
# For cleanup during consecutive runs:
#   rm -Rf ../sasfit_*_linux64* && (cd saskit && rm -Rf build/*/dqkit saskit_* bin) && sh src/appveyor/4_build.sh
version: 1
AppDir:
  # assuming this file resides in sasfit/src/,
  # addresses the package dir created by CMake previously
  path: appdir
  app_info:
    id: org.sasfit.SASfit
    name: SASfit
    icon: sasfit
    version: "@SASFIT_VERSION@"
    exec: saskit
    exec_args: $APPDIR/sasfit.vfs/main.tcl $@
  before_bundle:
    - echo "Running appimage-build in '$(pwd)'"
  after_bundle:
    - echo "after_bundle"
    #
    # adjustments to the current layout CMake prepares
    - (cd "$APPDIR" && rm -Rf sasfit sasfit.sh lib) # files not needed anymore, FIXME
    #
    # FIXME: generate proper icons from the svg
    - mkdir -p "$APPDIR"/usr/share/icons/hicolor/512x512/apps
    - cp doc/images/sasfit_icon_w512.png "$APPDIR"/usr/share/icons/hicolor/512x512/apps/sasfit.png
    #
    # Copy the saskit dqkit to let it get the proper libc interpreter update
    - cp saskit/build/*/dqkit/dqkit.bin "$APPDIR"/saskit
  before_runtime:
    - echo "before_runtime"
  after_runtime: |
    echo "after_runtime"
    #
    # copy modified dqkit back to the saskit source for reassembling
    SASKIT_BUILD_PATH="$(find saskit/build/ -mindepth 1 -maxdepth 1 -type d)"
    SF_DEBUG="$(echo $SASKIT_BUILD_PATH | grep -o debug || true)"
    [ -z "$SF_DEBUG" ] || SF_DEBUG="-$SF_DEBUG"
    echo "SF_DEBUG: '$SF_DEBUG', SASKIT_BUILD_PATH: '$SASKIT_BUILD_PATH'"
    cp "$APPDIR"/saskit "$SASKIT_BUILD_PATH"/dqkit/dqkit.bin
    export TCLSH="$(readlink -f src/tcl/linux64/bin/tclsh8.4)"
    #
    # create the ld in /tmp for the other binaries to work
    ("$APPDIR"/AppRun <(echo exit)) || true
    #
    # reassemble the combined tcl interpreter with the redirected ld
    (cd saskit && $TCLSH gen/buildkit finalize $SF_DEBUG -tcl=*.* -tk=*.* -blt -compression=none -binary=all -resfile=current)
    #
    # copy the reassembled tcl interpreter back into the app dir
    cp saskit/bin/*/dqkit-all.bin "$APPDIR"/saskit
    #
    # adjust autogenerated .desktop file
    cat "$APPDIR"/org.sasfit.SASfit.desktop
    echo "appdir is '$APPDIR'"
  apt:
    arch:
    - amd64
    allow_unauthenticated: false
    sources:
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal main restricted
      key_url: http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x871920D1991BC93C
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal universe
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal multiverse
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
    - sourceline: deb http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
    - sourceline: deb http://security.ubuntu.com/ubuntu focal-security main restricted
    - sourceline: deb http://security.ubuntu.com/ubuntu focal-security universe
    - sourceline: deb http://security.ubuntu.com/ubuntu focal-security multiverse
    include:
    - libgcc-s1
    - libstdc++6
  files:
    include:
    - sasfit.vfs/**
    - @SASFIT_BIN_FILE_LIST_FORMATTED@
    exclude:
    - opt/libc/usr/share/doc
    - usr/lib/x86_64-linux-gnu/gconv
    - usr/share/man
    - usr/share/doc/*/README.*
    - usr/share/doc/*/changelog.*
    - usr/share/doc/*/NEWS.*
    - usr/share/doc/*/TODO.*
    - usr/include
  test:
    # Tests require docker to be installed and its socket (e.g. /run/docker.sock)
    # being accessible for the current user (being in the 'docker' group)
    # for Ubuntu: 'apt install docker.io && adduser $(whoami) docker'
    ubuntu:
      image: appimagecrafters/tests-env:ubuntu-xenial
      command: sh -c 'timeout 10 ./AppRun; [ "$?" -eq 124 ]'
      use_host_x: true
    debian:
      image: appimagecrafters/tests-env:debian-stable
      command: sh -c 'timeout 10 ./AppRun; [ "$?" -eq 124 ]'
      use_host_x: True
    centos:
      image: appimagecrafters/tests-env:centos-7
      command: sh -c 'timeout 10 ./AppRun; [ "$?" -eq 124 ]'
      use_host_x: True
    fedora:
      image: appimagecrafters/tests-env:fedora-30
      command: sh -c 'timeout 10 ./AppRun; [ "$?" -eq 124 ]'
      use_host_x: True
    arch:
      image: appimagecrafters/tests-env:archlinux-latest
      command: sh -c 'timeout 10 ./AppRun; [ "$?" -eq 124 ]'
      use_host_x: True
AppImage:
  arch: x86_64
  update-information: guess
