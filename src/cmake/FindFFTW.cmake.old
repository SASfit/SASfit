# FFTW=/c/user/sasfit/fftw-3.3.2-dll32/include ; export FFTW
# Try to find the FFTW includes and library.
# 
# This module defines
# FFTW_INCLUDE_DIR, where to locate fftw3.h file
# FFTW_LIBRARIES, the libraries to link against to use fftw3
# FFTW_FOUND.  If false, you cannot build anything that requires fftw3.
# FFTW_LIBRARY, where to find the libfftw3 library.

MESSAGE("DBG FFTW_HOME: '$ENV{FFTW_HOME}'")
SET(FFTW_POSSIBLE_ROOT_DIRS
     /usr/local
#    ${FFTW_ROOT_DIR}
#    $ENV{FFTW_ROOT_DIR}
#    ${FFTW_DIR}
#    ${FFTW_HOME}    
#    $ENV{FFTW_DIR}
    $ENV{FFTW_HOME}
#    $ENV{EXTERN_LIBS_DIR}
#    $ENV{EXTRA}
)
MESSAGE("DBG possible roots dirs for fftw: '${FFTW_POSSIBLE_ROOT_DIRS}'")
SET(WIN32_PROGRAMFILES "$ENV{PROGRAMFILES}")
MESSAGE("DBG win32 programmfiles '${WIN32_PROGRAMFILES}'")

IF(WIN32_PROGRAMFILES)
LIST(APPEND FFTW_POSSIBLE_ROOT_DIRS "${WIN32_PROGRAMFILES}\\FFTW\\")
ENDIF(WIN32_PROGRAMFILES)
MESSAGE("DBG possible roots dirs for fftw: '${FFTW_POSSIBLE_ROOT_DIRS}'")

set(SEARCH_OPTIONS "")
if(DEFINED FFTW_PATH)
	if(EXISTS ${FFTW_PATH} AND IS_DIRECTORY ${FFTW_PATH})
		set(FFTW_POSSIBLE_ROOT_DIRS ${FFTW_PATH})
		set(SEARCH_OPTIONS NO_DEFAULT_PATH)
	endif(EXISTS ${FFTW_PATH} AND IS_DIRECTORY ${FFTW_PATH})
endif(DEFINED FFTW_PATH)

MESSAGE("DBG possible root dirs: '${FFTW_POSSIBLE_ROOT_DIRS}'")

FIND_PATH(FFTW_INCLUDE_DIR
	NAMES fftw3.h
	PATHS ${FFTW_POSSIBLE_ROOT_DIRS}
	PATH_SUFFIXES include
	${SEARCH_OPTIONS}
	DOC "FFTW header include dir"
)
MESSAGE(STATUS "FFTW_INCLUDE_DIR: ${FFTW_INCLUDE_DIR}")

FIND_LIBRARY(FFTW_FFTW_LIBRARY
	NAMES  fftw3 libfftw3
	PATHS  ${FFTW_POSSIBLE_ROOT_DIRS}
	PATH_SUFFIXES lib .lib a .a dll .dll la .la 
	${SEARCH_OPTIONS}
	DOC "FFTW library dir"
)
MESSAGE(STATUS "DBG FFTW library dir: '${FFTW_FFTW_LIBRARY}'")

FIND_FILE(FFTW_FFTW_STATIC_LIBRARY
	NAMES fftw3 libfftw3
	PATHS  ${FFTW_POSSIBLE_ROOT_DIRS}
	PATH_SUFFIXES lib .libs
	${SEARCH_OPTIONS}
	DOC "FFTW static library dir"
)
MESSAGE(STATUS "DBG FFTW static library dir: '${FFTW_FFTW_STATIC_LIBRARY}'")

IF(NOT FFTW_FFTW_LIBRARY)
	SET(FFTW_LIBRARY ${FFTW_FFTW_STATIC_LIBRARY})
ENDIF(NOT FFTW_FFTW_LIBRARY)

SET(FFTW_LIBRARIES
  ${FFTW_FFTW_LIBRARY}
)
SET(FFTW_STATIC_LIBRARIES 
  ${FFTW_FFTW_STATIC_LIBRARY}
)
SET(FFTW_LIBRARY
  ${FFTW_FFTW_LIBRARY}
)
SET(FFTW_INCLUDE_DIRS ${FFTW_INCLUDE_DIR})

MESSAGE(STATUS "FFTW_INCLUDE_DIRS=    ${FFTW_INCLUDE_DIRS}")
MESSAGE(STATUS "FFTW_STATIC_LIBRARIES=${FFTW_STATIC_LIBRARIES}")
MESSAGE(STATUS "FFTW_LIBRARIES=       ${FFTW_LIBRARIES}")
MESSAGE(STATUS "FFTW_LIBRARY=         ${FFTW_LIBRARY}")


SET(FFTW_FOUND FALSE)
IF(FFTW_INCLUDE_DIRS AND FFTW_LIBRARY)
  MESSAGE(STATUS "FFTW_INCLUDE_DIRS=${FFTW_INCLUDE_DIRS}")
  MESSAGE(STATUS "FFTW_LIBRARIES=${FFTW_LIBRARIES_DIRS}")
  SET(FFTW_FOUND TRUE)
ENDIF()

MESSAGE("DBG FFTFOUND: '${FFTW_FOUND}'")

MARK_AS_ADVANCED(
   FFTW_INCLUDE_DIRS
   FFTW_LIBRARIES
   FFTW_FOUND
)
